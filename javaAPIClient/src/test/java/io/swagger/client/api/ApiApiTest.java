/*
 * Aspose.Pdf RestApi
 * Aspose.Pdf RestApi provides a comprehensive set of endpoints for various PDF-related tasks, enabling efficient document processing and manipulation. Users can retrieve processing status, download files, manage file locks, parse documents, redact sensitive information, convert between formats, merge files, add watermarks, perform text searches, and much more. With endpoints for tasks like electronic signing, document comparison, and form filling, the API offers extensive functionality to cater to diverse PDF requirements.
 *
 * OpenAPI spec version: v1
 * Contact: Evgeny.Pirogov@aspose.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import java.io.File;
import io.swagger.client.model.FileResponse;
import org.junit.Test;
import org.junit.Ignore;


import java.util.*;


/**
 * API tests for ApiApi
 */
@Ignore
public class ApiApiTest {

    private final ApiApi api = new ApiApi();

    /**
     * Add page numbers to document.
     *
     * Adds page numbers to the provided documents with the specified alignment, starting number, and format.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiAddnumberPostTest() throws Exception {
        List<File> files = null;
        String vAlignment = null;
        String hAlignment = null;
        Integer startingNumber = null;
        Integer sNumber = null;
        Integer fNumber = null;
        Integer margin = null;
        Integer fontSize = null;
        String format = null;
        FileResponse response = api.pdfWebapiAddnumberPost(files, vAlignment, hAlignment, startingNumber, sNumber, fNumber, margin, fontSize, format);

        // TODO: test validations
    }
    /**
     * Compare documents text.
     *
     * Compare provided files and create document with marked changes.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiComparisonPostTest() throws Exception {
        List<File> files = null;
        FileResponse response = api.pdfWebapiComparisonPost(files);

        // TODO: test validations
    }
    /**
     * Compress document.
     *
     * Compresses the provided files using the specified compression level.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiCompressPostTest() throws Exception {
        List<File> files = null;
        Integer compressType = null;
        FileResponse response = api.pdfWebapiCompressPost(files, compressType);

        // TODO: test validations
    }
    /**
     * Convert document to another format.
     *
     * Converts the provided files from one format to another.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiConvertPostTest() throws Exception {
        List<File> files = null;
        String inputType = null;
        String outputType = null;
        Integer xmlType = null;
        String xmlTag = null;
        Integer fontSise = null;
        Boolean isToSingle = null;
        String separator = null;
        FileResponse response = api.pdfWebapiConvertPost(files, inputType, outputType, xmlType, xmlTag, fontSise, isToSingle, separator);

        // TODO: test validations
    }
    /**
     * Convert web page to document.
     *
     * Converts a web page to the specified output format.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiConvertWebpagePostTest() throws Exception {
        String webPage = null;
        String outputType = null;
        FileResponse response = api.pdfWebapiConvertWebpagePost(webPage, outputType);

        // TODO: test validations
    }
    /**
     * Crop document.
     *
     * Crops the provided files to the specified dimensions.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiCropPostTest() throws Exception {
        List<File> files = null;
        String inputType = null;
        Integer top = null;
        Integer right = null;
        Integer bottom = null;
        Integer left = null;
        String outputType = null;
        FileResponse response = api.pdfWebapiCropPost(files, inputType, top, right, bottom, left, outputType);

        // TODO: test validations
    }
    /**
     * File download.
     *
     * Downloads processed file.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiDownloadIdGetTest() throws Exception {
        String id = null;
        String file = null;
        api.pdfWebapiDownloadIdGet(id, file);

        // TODO: test validations
    }
    /**
     * Sign document with certificate.
     *
     * Electronically signs the provided documents with the specified certificate.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiEsignPostTest() throws Exception {
        String passw = null;
        List<File> files = null;
        String inputType = null;
        FileResponse response = api.pdfWebapiEsignPost(passw, files, inputType);

        // TODO: test validations
    }
    /**
     * Extract tables from document.
     *
     * Extracts tables from the provided documents and converts them to the specified output format.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiExtractPostTest() throws Exception {
        List<File> files = null;
        String inputType = null;
        String outputType = null;
        FileResponse response = api.pdfWebapiExtractPost(files, inputType, outputType);

        // TODO: test validations
    }
    /**
     * Fill form.
     *
     * Fills a form with the provided files.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiFormFillerPostTest() throws Exception {
        List<File> files = null;
        String fileName = null;
        FileResponse response = api.pdfWebapiFormFillerPost(files, fileName);

        // TODO: test validations
    }
    /**
     * Make GIF.
     *
     * Creates a GIF from the provided images.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiGifPostTest() throws Exception {
        List<File> files = null;
        Boolean keepImagesAsIs = null;
        Integer resizeToImage = null;
        Boolean streched = null;
        Integer width = null;
        Integer height = null;
        String frameTimes = null;
        FileResponse response = api.pdfWebapiGifPost(files, keepImagesAsIs, resizeToImage, streched, width, height, frameTimes);

        // TODO: test validations
    }
    /**
     * Calculate document hash.
     *
     * Calculate hashes of provided files using the specified algorithm.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiHashPostTest() throws Exception {
        List<File> files = null;
        String inputType = null;
        String outputType = null;
        String alg = null;
        FileResponse response = api.pdfWebapiHashPost(files, inputType, outputType, alg);

        // TODO: test validations
    }
    /**
     * Lock document.
     *
     * Locks a document with the provided password and optional files.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiLockPostTest() throws Exception {
        List<File> files = null;
        String passw = null;
        FileResponse response = api.pdfWebapiLockPost(files, passw);

        // TODO: test validations
    }
    /**
     * Merge documents.
     *
     * Merges the provided files into a single document or image, with options for orientation and page size.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiMergePostTest() throws Exception {
        List<File> files = null;
        String inputType = null;
        String outputType = null;
        Integer mergeType = null;
        Integer horizontal = null;
        Integer vertical = null;
        String pageSize = null;
        Boolean dcIsLandscape = null;
        FileResponse response = api.pdfWebapiMergePost(files, inputType, outputType, mergeType, horizontal, vertical, pageSize, dcIsLandscape);

        // TODO: test validations
    }
    /**
     * Read and change document metadata.
     *
     * Performs metadata operations on the provided files.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiMetadataPostTest() throws Exception {
        List<File> files = null;
        String operation = null;
        String folder = null;
        String name = null;
        FileResponse response = api.pdfWebapiMetadataPost(files, operation, folder, name);

        // TODO: test validations
    }
    /**
     * Organize document pages.
     *
     * Organizes the provided documents by removing or moving specified pages.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiOrganizePostTest() throws Exception {
        List<File> files = null;
        String inputType = null;
        String remove = null;
        String move = null;
        FileResponse response = api.pdfWebapiOrganizePost(files, inputType, remove, move);

        // TODO: test validations
    }
    /**
     * Parse document.
     *
     * Parses the provided files using a parser service.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiParsePostTest() throws Exception {
        List<File> files = Arrays.asList(new File("/home/tigra/Service/TestData/test.pdf"));
        FileResponse response = api.pdfWebapiParsePost(files);
        System.out.println(response);
        // TODO: test validations
    }
    /**
     * Redact document text.
     *
     * Redacts specified text from the provided documents, with options to search case-sensitively, target in text, comments, and metadata.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiRedactPostTest() throws Exception {
        List<File> files = null;
        String searchQuery = null;
        String replaceText = null;
        Boolean caseSensitive = null;
        Boolean text = null;
        Boolean comments = null;
        Boolean metadata = null;
        FileResponse response = api.pdfWebapiRedactPost(files, searchQuery, replaceText, caseSensitive, text, comments, metadata);

        // TODO: test validations
    }
    /**
     * Remove stored files.
     *
     * Removes processed files from storage.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiRemoveIdPostTest() throws Exception {
        String id = null;
        FileResponse response = api.pdfWebapiRemoveIdPost(id);

        // TODO: test validations
    }
    /**
     * Remove document annotations.
     *
     * Removes annotations from the provided documents.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiRemovePostTest() throws Exception {
        List<File> files = null;
        FileResponse response = api.pdfWebapiRemovePost(files);

        // TODO: test validations
    }
    /**
     * Removes document watermark.
     *
     * Removes a watermark from the document pages.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiRemoveWatermarkPostTest() throws Exception {
        String watermarkText = null;
        Integer top = null;
        Integer left = null;
        Integer bottom = null;
        Integer right = null;
        List<File> files = null;
        Boolean isAllPages = null;
        String watermarkType = null;
        String removeRange = null;
        FileResponse response = api.pdfWebapiRemoveWatermarkPost(watermarkText, top, left, bottom, right, files, isAllPages, watermarkType, removeRange);

        // TODO: test validations
    }
    /**
     * Remove pages from document.
     *
     * Removes specified pages from the provided files.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiRemovepagesPostTest() throws Exception {
        List<File> files = null;
        String removeRange = null;
        FileResponse response = api.pdfWebapiRemovepagesPost(files, removeRange);

        // TODO: test validations
    }
    /**
     * Repair document.
     *
     * Repairs the provided files.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiRepairPostTest() throws Exception {
        List<File> files = null;
        FileResponse response = api.pdfWebapiRepairPost(files);

        // TODO: test validations
    }
    /**
     * Resize document.
     *
     * Resizes the provided files to the specified dimensions or using a preset size.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiResizePostTest() throws Exception {
        List<File> files = null;
        String inputType = null;
        String outputType = null;
        Integer resizeType = null;
        String presetType = null;
        String presetSize = null;
        Integer width = null;
        Integer height = null;
        Integer percentage = null;
        Boolean useProportions = null;
        String pageSize = null;
        FileResponse response = api.pdfWebapiResizePost(files, inputType, outputType, resizeType, presetType, presetSize, width, height, percentage, useProportions, pageSize);

        // TODO: test validations
    }
    /**
     * Rotate document.
     *
     * Rotates the provided files by a specified angle, with options for rotation type and page number.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiRotatePostTest() throws Exception {
        List<File> files = null;
        Integer angle = null;
        String rotateType = null;
        String pageNum = null;
        FileResponse response = api.pdfWebapiRotatePost(files, angle, rotateType, pageNum);

        // TODO: test validations
    }
    /**
     * Search document text.
     *
     * Searches the provided files for the specified query and makr found text with yellow background.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiSearchPostTest() throws Exception {
        List<File> files = null;
        String query = null;
        FileResponse response = api.pdfWebapiSearchPost(files, query);

        // TODO: test validations
    }
    /**
     * Make scanned pdf searchable.
     *
     * Converts the provided files into a searchable PDF format for the specified language.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiSearchablePostTest() throws Exception {
        List<File> files = null;
        String lang = null;
        FileResponse response = api.pdfWebapiSearchablePost(files, lang);

        // TODO: test validations
    }
    /**
     * Add signature to document.
     *
     * Adds a signature, text and image to the provided documents.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiSignaturePostTest() throws Exception {
        String image = null;
        String text = null;
        String textColor = null;
        List<File> files = null;
        String inputType = null;
        String outputType = null;
        String signatureType = null;
        FileResponse response = api.pdfWebapiSignaturePost(image, text, textColor, files, inputType, outputType, signatureType);

        // TODO: test validations
    }
    /**
     * Split document.
     *
     * Splits the provided documents based on the specified split type and page rage to spit.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiSplitdocPostTest() throws Exception {
        List<File> files = null;
        Integer splitType = null;
        String pars = null;
        FileResponse response = api.pdfWebapiSplitdocPost(files, splitType, pars);

        // TODO: test validations
    }
    /**
     * Split image.
     *
     * Splits the provided images into smaller parts based on the specified parameters.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiSplitimagePostTest() throws Exception {
        List<File> files = null;
        Integer splitType = null;
        Integer vertical = null;
        Integer horizontal = null;
        String outputType = null;
        FileResponse response = api.pdfWebapiSplitimagePost(files, splitType, vertical, horizontal, outputType);

        // TODO: test validations
    }
    /**
     * Processing status.
     *
     * Retrieves the status of a processing.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiStatusIdPostTest() throws Exception {
        String id = null;
        FileResponse response = api.pdfWebapiStatusIdPost(id);

        // TODO: test validations
    }
    /**
     * Unlock document.
     *
     * Attempts to unlock a document with an password and associated files.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiUnlockPostTest() throws Exception {
        List<File> files = null;
        String passw = null;
        FileResponse response = api.pdfWebapiUnlockPost(files, passw);

        // TODO: test validations
    }
    /**
     * Verify document certificate.
     *
     * Verifies the electronic signature of the provided files.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiVerifyEsignPostTest() throws Exception {
        List<File> files = null;
        String inputType = null;
        FileResponse response = api.pdfWebapiVerifyEsignPost(files, inputType);

        // TODO: test validations
    }
    /**
     * Add watermark to document.
     *
     * Adds a watermark to the provided files.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiWatermarkPostTest() throws Exception {
        List<File> files = Arrays.asList(new File("/home/tigra/Service/TestData/test.pdf"));;;
        String inputType = "pdf";
        String outputType = "pdf";
        Boolean isColored = false;
        Boolean isText = true;
        String text = "TEST";
        String name = "TEST_WATERMARK";
        Integer size = 20;
        Boolean bold = true;
        Boolean italic = false;
        Boolean underlined = false;
        String color = "GREEN";
        Boolean isBackground = true;
        Integer rotation = 0;
        Float transparency = 0.9f;
        Boolean layer = true;
        Integer pageFrom = 1;
        Integer pageTo = 1;
        FileResponse response = api.pdfWebapiWatermarkPost(files, inputType, outputType, isColored, isText, text, name, size, bold, italic, underlined, color, isBackground, rotation, transparency, layer, pageFrom, pageTo);
        System.out.println(response);
        // TODO: test validations
    }
    /**
     * Count words and chars in document.
     *
     * Counts the words in the provided files within the specified page range.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiWordcounterPostTest() throws Exception {
        List<File> files =  Arrays.asList(new File("/home/tigra/Service/TestData/test.pdf"));;
        String pageRange = "1-2";
        FileResponse response = api.pdfWebapiWordcounterPost(files, pageRange);
        System.out.println(response);
        // TODO: test validations
    }
    /**
     * Convert XFA format to a another format.
     *
     * Converts the provided documents from XFA format to a different format.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiXfaconvertPostTest() throws Exception {
        List<File> files = new ArrayList<File>();

        files.add(new File("/home/tigra/Service/TestData/test.pdf"));

        String inputType = "PDF";
        FileResponse response = api.pdfWebapiXfaconvertPost(files, inputType);
        System.out.println(response);
        // TODO: test validations
    }
}
