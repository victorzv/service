/*
 * Aspose.Pdf RestApi
 * Demo 1
 *
 * OpenAPI spec version: v1
 * Contact: Evgeny.Pirogov@aspose.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import java.io.File;
import io.swagger.client.model.FileResponse;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ApiApi
 */
@Ignore
public class ApiApiTest {

    private final ApiApi api = new ApiApi();

    /**
     * Adds page numbers to the provided documents with the specified alignment, starting number, and format.
     *
     * This endpoint is used to add page numbers to the provided files with the specified alignment, starting number, and format.  If the addition is started, the response will contain a success status and an optional message.  If the addition fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiAddnumberPostTest() throws Exception {
        List<File> files = null;
        String vAlignment = null;
        String hAlignment = null;
        Integer startingNumber = null;
        Integer sNumber = null;
        Integer fNumber = null;
        Integer margin = null;
        Integer fontSize = null;
        String format = null;
        FileResponse response = api.pdfWebapiAddnumberPost(files, vAlignment, hAlignment, startingNumber, sNumber, fNumber, margin, fontSize, format);

        // TODO: test validations
    }
    /**
     * Performs a binary comparison on the provided files.
     *
     * This endpoint is used to perform a binary comparison on the provided files.  If the comparison is started, the response will contain a success status and an optional message.  If the comparison fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiBinaryComparisonPostTest() throws Exception {
        List<File> files = null;
        FileResponse response = api.pdfWebapiBinaryComparisonPost(files);

        // TODO: test validations
    }
    /**
     * Generates a PDF document based on the provided files and question.
     *
     * This endpoint is used to generate a PDF document based on the provided files and question.  If the generation is started, the response will contain a success status and an optional message.  If the generation fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiChatpdfPostTest() throws Exception {
        List<File> files = null;
        Integer mode = null;
        String question = null;
        FileResponse response = api.pdfWebapiChatpdfPost(files, mode, question);

        // TODO: test validations
    }
    /**
     * Compare provided files and create document with marked changes.
     *
     * This endpoint is used to compare the provided files.  If the comparison is started, the response will contain a success status and an optional message.  If the comparison fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiComparisonPostTest() throws Exception {
        List<File> files = null;
        FileResponse response = api.pdfWebapiComparisonPost(files);

        // TODO: test validations
    }
    /**
     * Compresses the provided files using the specified compression level.
     *
     * This endpoint is used to compress the provided files using the specified compression level.  If the compression is started, the response will contain a success status and an optional message.  If the compression fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiCompressPostTest() throws Exception {
        List<File> files = null;
        Integer compressType = null;
        FileResponse response = api.pdfWebapiCompressPost(files, compressType);

        // TODO: test validations
    }
    /**
     * Converts the provided files from one format to another, with options for XML conversion and font size adjustment.
     *
     * This endpoint is used to convert the provided files from one format to another.  If the conversion is started, the response will contain a success status and an optional message.  If the conversion fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiConvertPostTest() throws Exception {
        List<File> files = null;
        String inputType = null;
        String outputType = null;
        Integer xmlType = null;
        String xmlTag = null;
        Integer fontSise = null;
        Boolean isToSingle = null;
        String separator = null;
        FileResponse response = api.pdfWebapiConvertPost(files, inputType, outputType, xmlType, xmlTag, fontSise, isToSingle, separator);

        // TODO: test validations
    }
    /**
     * Converts a web page to the specified output format.
     *
     * This endpoint is used to convert a web page to the specified output format.  If the conversion is started, the response will contain a success status and an optional message.  If the conversion fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiConvertWebpagePostTest() throws Exception {
        String webPage = null;
        String outputType = null;
        FileResponse response = api.pdfWebapiConvertWebpagePost(webPage, outputType);

        // TODO: test validations
    }
    /**
     * Crops the provided files to the specified dimensions.
     *
     * This endpoint is used to crop the provided files to the specified dimensions.  If the cropping is started, the response will contain a success status and an optional message.  If the cropping fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiCropPostTest() throws Exception {
        List<File> files = null;
        String inputType = null;
        Integer top = null;
        Integer right = null;
        Integer bottom = null;
        Integer left = null;
        String outputType = null;
        FileResponse response = api.pdfWebapiCropPost(files, inputType, top, right, bottom, left, outputType);

        // TODO: test validations
    }
    /**
     * Downloads a file.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiDownloadIdGetTest() throws Exception {
        String id = null;
        String file = null;
        api.pdfWebapiDownloadIdGet(id, file);

        // TODO: test validations
    }
    /**
     * Downloads a file as a stream.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiDownloadStreamIdPostTest() throws Exception {
        String id = null;
        String fileName = null;
        FileResponse response = api.pdfWebapiDownloadStreamIdPost(id, fileName);

        // TODO: test validations
    }
    /**
     * Electronically signs the provided files with the specified certificate and its password.
     *
     * This endpoint is used to electronically sign the provided files with the specified certificate and its password.  If the signing is started, the response will contain a success status and an optional message.  If the signing fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiEsignPostTest() throws Exception {
        List<File> files = null;
        String inputType = null;
        String passw = null;
        FileResponse response = api.pdfWebapiEsignPost(files, inputType, passw);

        // TODO: test validations
    }
    /**
     * Extracts tables from the provided documents and converts them to the specified output format.
     *
     * This endpoint is used to extract tables from the provided files and convert them to the specified output format.  If the extraction is started, the response will contain a success status and an optional message.  If the extraction fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiExtractPostTest() throws Exception {
        List<File> files = null;
        String inputType = null;
        String outputType = null;
        FileResponse response = api.pdfWebapiExtractPost(files, inputType, outputType);

        // TODO: test validations
    }
    /**
     * Fills a form with the provided files.
     *
     * This endpoint is used to fill a form with the provided files.  If the filling is started, the response will contain a success status and an optional message.  If the filling fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiFormFillerPostTest() throws Exception {
        List<File> files = null;
        String fileName = null;
        FileResponse response = api.pdfWebapiFormFillerPost(files, fileName);

        // TODO: test validations
    }
    /**
     * Creates a GIF from the provided images.
     *
     * This endpoint is used to create a GIF from the provided images.  If the creation is started, the response will contain a success status and an optional message.  If the creation fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiGifPostTest() throws Exception {
        Boolean keepImagesAsIs = null;
        Integer resizeToImage = null;
        Boolean streched = null;
        Integer width = null;
        Integer height = null;
        String frameTimes = null;
        FileResponse response = api.pdfWebapiGifPost(keepImagesAsIs, resizeToImage, streched, width, height, frameTimes);

        // TODO: test validations
    }
    /**
     * Hashes the provided files using the specified algorithm.
     *
     * This endpoint is used to hash the provided files using the specified algorithm.  If the hashing is started, the response will contain a success status and an optional message.  If the hashing fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiHashPostTest() throws Exception {
        List<File> files = null;
        String inputType = null;
        String outputType = null;
        String alg = null;
        FileResponse response = api.pdfWebapiHashPost(files, inputType, outputType, alg);

        // TODO: test validations
    }
    /**
     * Locks a document with the provided password and optional files.
     *
     * This endpoint is used to lock a resource with an optional password and associated files.  If the lock is started, the response will contain a success status and processing id.  If the lock fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiLockPostTest() throws Exception {
        List<File> files = null;
        String passw = null;
        FileResponse response = api.pdfWebapiLockPost(files, passw);

        // TODO: test validations
    }
    /**
     * Merges the provided files into a single document or image, with options for orientation and page size.
     *
     * This endpoint is used to merge the provided files into a single document or image.  If the merge is started, the response will contain a success status and an optional message.  If the merge fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiMergePostTest() throws Exception {
        List<File> files = null;
        String inputType = null;
        String outputType = null;
        Integer horizontal = null;
        Integer vertical = null;
        String pageSize = null;
        Boolean dcIsLandscape = null;
        FileResponse response = api.pdfWebapiMergePost(files, inputType, outputType, horizontal, vertical, pageSize, dcIsLandscape);

        // TODO: test validations
    }
    /**
     * Performs metadata operations on the provided files.
     *
     * This endpoint is used to perform metadata operations on the provided files.  If the operation is started, the response will contain a success status and an optional message.  If the operation fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiMetadataPostTest() throws Exception {
        List<File> files = null;
        String operation = null;
        String folder = null;
        String name = null;
        FileResponse response = api.pdfWebapiMetadataPost(files, operation, folder, name);

        // TODO: test validations
    }
    /**
     * Creates a music video from the provided files.
     *
     * This endpoint is used to create a music video from the provided files.  If the creation is started, the response will contain a success status and an optional message.  If the creation fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiMusicVideoPostTest() throws Exception {
        List<File> files = null;
        Integer interval = null;
        String outputType = null;
        FileResponse response = api.pdfWebapiMusicVideoPost(files, interval, outputType);

        // TODO: test validations
    }
    /**
     * Organizes the provided documents by removing or moving specified pages.
     *
     * This endpoint is used to organize the provided documents by removing or moving specified pages.  If the organization is started, the response will contain a success status and an optional message.  If the organization fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiOrganizePostTest() throws Exception {
        List<File> files = null;
        String inputType = null;
        String remove = null;
        String move = null;
        FileResponse response = api.pdfWebapiOrganizePost(files, inputType, remove, move);

        // TODO: test validations
    }
    /**
     * Parses the provided files using a parser service.
     *
     * This endpoint is used to send files to a parser service for processing.  If the parsing is started, the response will contain a success status and an optional message.  If the parsing fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiParsePostTest() throws Exception {
        List<File> files = null;
        FileResponse response = api.pdfWebapiParsePost(files);

        // TODO: test validations
    }
    /**
     * Redacts specified text from the provided documents, with options to search case-sensitively, target in text, comments, and metadata.
     *
     * This endpoint is used to redact specified text from the provided files, with options to search case-sensitively and target different parts of the document such as text, comments, and metadata.  If the redaction is started, the response will contain a success status and an optional message.  If the redaction fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiRedactPostTest() throws Exception {
        List<File> files = null;
        String searchQuery = null;
        String replaceText = null;
        Boolean caseSensitive = null;
        Boolean text = null;
        Boolean comments = null;
        Boolean metadata = null;
        FileResponse response = api.pdfWebapiRedactPost(files, searchQuery, replaceText, caseSensitive, text, comments, metadata);

        // TODO: test validations
    }
    /**
     * Removes all files from processing.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiRemoveIdPostTest() throws Exception {
        String id = null;
        FileResponse response = api.pdfWebapiRemoveIdPost(id);

        // TODO: test validations
    }
    /**
     * Removes annotations from the provided documents.
     *
     * This endpoint is used to remove annotations from the provided files.  If the removal is started, the response will contain a success status and an optional message.  If the removal fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiRemovePostTest() throws Exception {
        List<File> files = null;
        FileResponse response = api.pdfWebapiRemovePost(files);

        // TODO: test validations
    }
    /**
     * Removes a watermark from the provided files.
     *
     * This endpoint is used to remove a watermark from the provided files.  If the removal is started, the response will contain a success status and an optional message.  If the removal fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiRemoveWatermarkPostTest() throws Exception {
        String watermarkText = null;
        Integer top = null;
        Integer left = null;
        Integer bottom = null;
        Integer right = null;
        List<File> files = null;
        Boolean isAllPages = null;
        String watermarkType = null;
        String removeRange = null;
        FileResponse response = api.pdfWebapiRemoveWatermarkPost(watermarkText, top, left, bottom, right, files, isAllPages, watermarkType, removeRange);

        // TODO: test validations
    }
    /**
     * Removes specified pages from the provided files.
     *
     * This endpoint is used to remove specified pages from the provided files.  If the removal is started, the response will contain a success status and an optional message.  If the removal fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiRemovepagesPostTest() throws Exception {
        List<File> files = null;
        String removeRange = null;
        FileResponse response = api.pdfWebapiRemovepagesPost(files, removeRange);

        // TODO: test validations
    }
    /**
     * Repairs the provided files.
     *
     * This endpoint is used to repair the provided files.  If the repair is started, the response will contain a success status and an optional message.  If the repair fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiRepairPostTest() throws Exception {
        List<File> files = null;
        FileResponse response = api.pdfWebapiRepairPost(files);

        // TODO: test validations
    }
    /**
     * Resizes the provided files to the specified dimensions or using a preset size.
     *
     * This endpoint is used to resize the provided files to the specified dimensions or using a preset size.  If the resizing is started, the response will contain a success status and an optional message.  If the resizing fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiResizePostTest() throws Exception {
        List<File> files = null;
        String inputType = null;
        String outputType = null;
        Integer resizeType = null;
        String presetType = null;
        String presetSize = null;
        Integer width = null;
        Integer height = null;
        Integer percentage = null;
        Boolean useProportions = null;
        String pageSize = null;
        FileResponse response = api.pdfWebapiResizePost(files, inputType, outputType, resizeType, presetType, presetSize, width, height, percentage, useProportions, pageSize);

        // TODO: test validations
    }
    /**
     * Rotates the provided files by a specified angle, with options for rotation type and page number.
     *
     * This endpoint is used to rotate the provided files by a specified angle.  If the rotation is started, the response will contain a success status and an optional message.  If the rotation fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiRotatePostTest() throws Exception {
        List<File> files = null;
        Integer angle = null;
        String rotateType = null;
        String pageNum = null;
        FileResponse response = api.pdfWebapiRotatePost(files, angle, rotateType, pageNum);

        // TODO: test validations
    }
    /**
     * Searches the provided files for the specified query and makr found text with yellow background.
     *
     * This endpoint is used to search the provided files for the specified query.  If the search is started, the response will contain a success status and an optional message.  If the search fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiSearchPostTest() throws Exception {
        List<File> files = null;
        String query = null;
        FileResponse response = api.pdfWebapiSearchPost(files, query);

        // TODO: test validations
    }
    /**
     * Converts the provided files into a searchable PDF format for the specified language.
     *
     * This endpoint is used to convert the provided files into a searchable PDF format for the specified language.  If the conversion is started, the response will contain a success status and an optional message.  If the conversion fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiSearchablePostTest() throws Exception {
        List<File> files = null;
        String lang = null;
        FileResponse response = api.pdfWebapiSearchablePost(files, lang);

        // TODO: test validations
    }
    /**
     * Adds a signature to the provided files.
     *
     * This endpoint is used to add a signature to the provided files.  If the addition is started, the response will contain a success status and an optional message.  If the addition fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiSignaturePostTest() throws Exception {
        List<File> files = null;
        String inputType = null;
        String outputType = null;
        String signatureType = null;
        FileResponse response = api.pdfWebapiSignaturePost(files, inputType, outputType, signatureType);

        // TODO: test validations
    }
    /**
     * Splits the provided documents based on the specified split type and page rage to spit.
     *
     * This endpoint is used to split documents based on the specified split type and page rage.  If the splitting is started, the response will contain a success status and an optional message.  If the splitting fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiSplitdocPostTest() throws Exception {
        List<File> files = null;
        Integer splitType = null;
        String pars = null;
        FileResponse response = api.pdfWebapiSplitdocPost(files, splitType, pars);

        // TODO: test validations
    }
    /**
     * Splits the provided images into smaller parts based on the specified parameters.
     *
     * This endpoint is used to split images into smaller parts based on the specified parameters.  If the splitting is started, the response will contain a success status and an optional message.  If the splitting fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiSplitimagePostTest() throws Exception {
        List<File> files = null;
        Integer splitType = null;
        Integer vertical = null;
        Integer horizontal = null;
        String outputType = null;
        FileResponse response = api.pdfWebapiSplitimagePost(files, splitType, vertical, horizontal, outputType);

        // TODO: test validations
    }
    /**
     * Retrieves the status of a processing.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiStatusIdPostTest() throws Exception {
        String id = null;
        FileResponse response = api.pdfWebapiStatusIdPost(id);

        // TODO: test validations
    }
    /**
     * Attempts to unlock a document with an password and associated files.
     *
     * This endpoint is used to unlock a resource that was previously locked with a password on associated files.  If the unlock is started, the response will contain a success status and an optional message.  If the unlock fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiUnlockPostTest() throws Exception {
        List<File> files = null;
        String passw = null;
        FileResponse response = api.pdfWebapiUnlockPost(files, passw);

        // TODO: test validations
    }
    /**
     * Verifies the electronic signature of the provided files.
     *
     * This endpoint is used to verify the electronic signature of the provided files.  If the verification is started, the response will contain a success status and an optional message.  If the verification fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiVerifyEsignPostTest() throws Exception {
        List<File> files = null;
        String inputType = null;
        FileResponse response = api.pdfWebapiVerifyEsignPost(files, inputType);

        // TODO: test validations
    }
    /**
     * Adds a watermark to the provided files.
     *
     * This endpoint is used to add a watermark to the provided files.  If the addition is started, the response will contain a success status and an optional message.  If the addition fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiWatermarkPostTest() throws Exception {
        Boolean isText = null;
        String text = null;
        String name2 = null;
        Integer size = null;
        Boolean bold = null;
        Boolean italic = null;
        Boolean underlined = null;
        String color = null;
        String contentType = null;
        String contentDisposition = null;
        Map<String, List<String>> headers = null;
        Long length = null;
        String name = null;
        String fileName = null;
        Boolean isBackground = null;
        Integer rotation = null;
        Float transparency = null;
        Boolean layer = null;
        Integer pageFrom = null;
        Integer pageTo = null;
        List<File> files = null;
        String inputType = null;
        String outputType = null;
        FileResponse response = api.pdfWebapiWatermarkPost(isText, text, name2, size, bold, italic, underlined, color, contentType, contentDisposition, headers, length, name, fileName, isBackground, rotation, transparency, layer, pageFrom, pageTo, files, inputType, outputType);

        // TODO: test validations
    }
    /**
     * Counts the words in the provided files within the specified page range.
     *
     * This endpoint is used to count the words in the provided files within the specified page range.  If the counting is started, the response will contain a success status and the word count.  If the counting fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiWordCounterPostTest() throws Exception {
        List<File> files = null;
        String pageRange = null;
        FileResponse response = api.pdfWebapiWordCounterPost(files, pageRange);

        // TODO: test validations
    }
    /**
     * Converts the provided documents from XFA format to a different format.
     *
     * This endpoint is used to convert the provided files from XFA format to a different format.  If the conversion is started, the response will contain a success status and an optional message.  If the conversion fails, the response will contain an error status and a message indicating the reason for the failure.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiXfaconvertPostTest() throws Exception {
        List<File> files = null;
        String inputType = null;
        FileResponse response = api.pdfWebapiXfaconvertPost(files, inputType);

        // TODO: test validations
    }
}
