/*
 * Aspose.Pdf RestApi
 * Aspose.Pdf RestApi provides a comprehensive set of endpoints for various PDF-related tasks, enabling efficient document processing and manipulation. Users can retrieve processing status, download files, manage file locks, parse documents, redact sensitive information, convert between formats, merge files, add watermarks, perform text searches, and much more. With endpoints for tasks like electronic signing, document comparison, and form filling, the API offers extensive functionality to cater to diverse PDF requirements.
 *
 * OpenAPI spec version: v1
 * Contact: Evgeny.Pirogov@aspose.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.DocProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * File processing result.
 */
@Schema(description = "File processing result.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-04-20T08:30:02.342974725Z[GMT]")

public class FileSafeResult {
  @SerializedName("isSuccess")
  private Boolean isSuccess = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("fileName")
  private String fileName = null;

  @SerializedName("uploadFileName")
  private String uploadFileName = null;

  @SerializedName("idUpload")
  private String idUpload = null;

  @SerializedName("fileLength")
  private Long fileLength = null;

  @SerializedName("builtProp")
  private List<DocProperty> builtProp = null;

  @SerializedName("customProp")
  private List<DocProperty> customProp = null;

  public FileSafeResult isSuccess(Boolean isSuccess) {
    this.isSuccess = isSuccess;
    return this;
  }

   /**
   * Processing status
   * @return isSuccess
  **/
  @Schema(description = "Processing status")
  public Boolean isIsSuccess() {
    return isSuccess;
  }

  public void setIsSuccess(Boolean isSuccess) {
    this.isSuccess = isSuccess;
  }

  public FileSafeResult id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Upload id.
   * @return id
  **/
  @Schema(description = "Upload id.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public FileSafeResult fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

   /**
   * File name.
   * @return fileName
  **/
  @Schema(description = "File name.")
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }

  public FileSafeResult uploadFileName(String uploadFileName) {
    this.uploadFileName = uploadFileName;
    return this;
  }

   /**
   * Gets or sets the name of the upload file.
   * @return uploadFileName
  **/
  @Schema(description = "Gets or sets the name of the upload file.")
  public String getUploadFileName() {
    return uploadFileName;
  }

  public void setUploadFileName(String uploadFileName) {
    this.uploadFileName = uploadFileName;
  }

  public FileSafeResult idUpload(String idUpload) {
    this.idUpload = idUpload;
    return this;
  }

   /**
   * idUpload from request.
   * @return idUpload
  **/
  @Schema(description = "idUpload from request.")
  public String getIdUpload() {
    return idUpload;
  }

  public void setIdUpload(String idUpload) {
    this.idUpload = idUpload;
  }

   /**
   * File length.
   * @return fileLength
  **/
  @Schema(description = "File length.")
  public Long getFileLength() {
    return fileLength;
  }

  public FileSafeResult builtProp(List<DocProperty> builtProp) {
    this.builtProp = builtProp;
    return this;
  }

  public FileSafeResult addBuiltPropItem(DocProperty builtPropItem) {
    if (this.builtProp == null) {
      this.builtProp = new ArrayList<DocProperty>();
    }
    this.builtProp.add(builtPropItem);
    return this;
  }

   /**
   * Get builtProp
   * @return builtProp
  **/
  @Schema(description = "")
  public List<DocProperty> getBuiltProp() {
    return builtProp;
  }

  public void setBuiltProp(List<DocProperty> builtProp) {
    this.builtProp = builtProp;
  }

  public FileSafeResult customProp(List<DocProperty> customProp) {
    this.customProp = customProp;
    return this;
  }

  public FileSafeResult addCustomPropItem(DocProperty customPropItem) {
    if (this.customProp == null) {
      this.customProp = new ArrayList<DocProperty>();
    }
    this.customProp.add(customPropItem);
    return this;
  }

   /**
   * Get customProp
   * @return customProp
  **/
  @Schema(description = "")
  public List<DocProperty> getCustomProp() {
    return customProp;
  }

  public void setCustomProp(List<DocProperty> customProp) {
    this.customProp = customProp;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileSafeResult fileSafeResult = (FileSafeResult) o;
    return Objects.equals(this.isSuccess, fileSafeResult.isSuccess) &&
        Objects.equals(this.id, fileSafeResult.id) &&
        Objects.equals(this.fileName, fileSafeResult.fileName) &&
        Objects.equals(this.uploadFileName, fileSafeResult.uploadFileName) &&
        Objects.equals(this.idUpload, fileSafeResult.idUpload) &&
        Objects.equals(this.fileLength, fileSafeResult.fileLength) &&
        Objects.equals(this.builtProp, fileSafeResult.builtProp) &&
        Objects.equals(this.customProp, fileSafeResult.customProp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isSuccess, id, fileName, uploadFileName, idUpload, fileLength, builtProp, customProp);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileSafeResult {\n");
    
    sb.append("    isSuccess: ").append(toIndentedString(isSuccess)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    uploadFileName: ").append(toIndentedString(uploadFileName)).append("\n");
    sb.append("    idUpload: ").append(toIndentedString(idUpload)).append("\n");
    sb.append("    fileLength: ").append(toIndentedString(fileLength)).append("\n");
    sb.append("    builtProp: ").append(toIndentedString(builtProp)).append("\n");
    sb.append("    customProp: ").append(toIndentedString(customProp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
