/*
 * Aspose.Pdf RestApi
 * Demo 1
 *
 * OpenAPI spec version: v1
 * Contact: Evgeny.Pirogov@aspose.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * WebapiWatermarkBody
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-03-12T15:58:21.646745992Z[GMT]")

public class WebapiWatermarkBody {
  @SerializedName("isText")
  private Boolean isText = null;

  @SerializedName("text")
  private String text = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("size")
  private Integer size = null;

  @SerializedName("bold")
  private Boolean bold = null;

  @SerializedName("italic")
  private Boolean italic = null;

  @SerializedName("underlined")
  private Boolean underlined = null;

  @SerializedName("color")
  private String color = null;

  @SerializedName("ContentType")
  private String contentType = null;

  @SerializedName("ContentDisposition")
  private String contentDisposition = null;

  @SerializedName("Headers")
  private Map<String, List<String>> headers = null;

  @SerializedName("Length")
  private Long length = null;

//  @SerializedName("Name")
//  private String name = null;

  @SerializedName("FileName")
  private String fileName = null;

  @SerializedName("isBackground")
  private Boolean isBackground = null;

  @SerializedName("rotation")
  private Integer rotation = null;

  @SerializedName("transparency")
  private Float transparency = null;

  @SerializedName("layer")
  private Boolean layer = null;

  @SerializedName("pageFrom")
  private Integer pageFrom = null;

  @SerializedName("pageTo")
  private Integer pageTo = null;

  @SerializedName("files")
  private List<File> files = null;

  public WebapiWatermarkBody isText(Boolean isText) {
    this.isText = isText;
    return this;
  }

   /**
   * Get isText
   * @return isText
  **/
  @Schema(description = "")
  public Boolean isIsText() {
    return isText;
  }

  public void setIsText(Boolean isText) {
    this.isText = isText;
  }

  public WebapiWatermarkBody text(String text) {
    this.text = text;
    return this;
  }

   /**
   * Get text
   * @return text
  **/
  @Schema(description = "")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public WebapiWatermarkBody name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public WebapiWatermarkBody size(Integer size) {
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @Schema(description = "")
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }

  public WebapiWatermarkBody bold(Boolean bold) {
    this.bold = bold;
    return this;
  }

   /**
   * Get bold
   * @return bold
  **/
  @Schema(description = "")
  public Boolean isBold() {
    return bold;
  }

  public void setBold(Boolean bold) {
    this.bold = bold;
  }

  public WebapiWatermarkBody italic(Boolean italic) {
    this.italic = italic;
    return this;
  }

   /**
   * Get italic
   * @return italic
  **/
  @Schema(description = "")
  public Boolean isItalic() {
    return italic;
  }

  public void setItalic(Boolean italic) {
    this.italic = italic;
  }

  public WebapiWatermarkBody underlined(Boolean underlined) {
    this.underlined = underlined;
    return this;
  }

   /**
   * Get underlined
   * @return underlined
  **/
  @Schema(description = "")
  public Boolean isUnderlined() {
    return underlined;
  }

  public void setUnderlined(Boolean underlined) {
    this.underlined = underlined;
  }

  public WebapiWatermarkBody color(String color) {
    this.color = color;
    return this;
  }

   /**
   * Get color
   * @return color
  **/
  @Schema(description = "")
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }

  public WebapiWatermarkBody contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

   /**
   * Get contentType
   * @return contentType
  **/
  @Schema(description = "")
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }

  public WebapiWatermarkBody contentDisposition(String contentDisposition) {
    this.contentDisposition = contentDisposition;
    return this;
  }

   /**
   * Get contentDisposition
   * @return contentDisposition
  **/
  @Schema(description = "")
  public String getContentDisposition() {
    return contentDisposition;
  }

  public void setContentDisposition(String contentDisposition) {
    this.contentDisposition = contentDisposition;
  }

  public WebapiWatermarkBody headers(Map<String, List<String>> headers) {
    this.headers = headers;
    return this;
  }

  public WebapiWatermarkBody putHeadersItem(String key, List<String> headersItem) {
    if (this.headers == null) {
      this.headers = new HashMap<String, List<String>>();
    }
    this.headers.put(key, headersItem);
    return this;
  }

   /**
   * Get headers
   * @return headers
  **/
  @Schema(description = "")
  public Map<String, List<String>> getHeaders() {
    return headers;
  }

  public void setHeaders(Map<String, List<String>> headers) {
    this.headers = headers;
  }

  public WebapiWatermarkBody length(Long length) {
    this.length = length;
    return this;
  }

   /**
   * Get length
   * @return length
  **/
  @Schema(description = "")
  public Long getLength() {
    return length;
  }

  public void setLength(Long length) {
    this.length = length;
  }

//  public WebapiWatermarkBody name(String name) {
//    this.name = name;
//    return this;
//  }
//
//   /**
//   * Get name
//   * @return name
//  **/
//  @Schema(description = "")
//  public String getName() {
//    return name;
//  }

//  public void setName(String name) {
//    this.name = name;
//  }

  public WebapiWatermarkBody fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

   /**
   * Get fileName
   * @return fileName
  **/
  @Schema(description = "")
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }

  public WebapiWatermarkBody isBackground(Boolean isBackground) {
    this.isBackground = isBackground;
    return this;
  }

   /**
   * Get isBackground
   * @return isBackground
  **/
  @Schema(description = "")
  public Boolean isIsBackground() {
    return isBackground;
  }

  public void setIsBackground(Boolean isBackground) {
    this.isBackground = isBackground;
  }

  public WebapiWatermarkBody rotation(Integer rotation) {
    this.rotation = rotation;
    return this;
  }

   /**
   * Get rotation
   * @return rotation
  **/
  @Schema(description = "")
  public Integer getRotation() {
    return rotation;
  }

  public void setRotation(Integer rotation) {
    this.rotation = rotation;
  }

  public WebapiWatermarkBody transparency(Float transparency) {
    this.transparency = transparency;
    return this;
  }

   /**
   * Get transparency
   * @return transparency
  **/
  @Schema(description = "")
  public Float getTransparency() {
    return transparency;
  }

  public void setTransparency(Float transparency) {
    this.transparency = transparency;
  }

  public WebapiWatermarkBody layer(Boolean layer) {
    this.layer = layer;
    return this;
  }

   /**
   * Get layer
   * @return layer
  **/
  @Schema(description = "")
  public Boolean isLayer() {
    return layer;
  }

  public void setLayer(Boolean layer) {
    this.layer = layer;
  }

  public WebapiWatermarkBody pageFrom(Integer pageFrom) {
    this.pageFrom = pageFrom;
    return this;
  }

   /**
   * Get pageFrom
   * @return pageFrom
  **/
  @Schema(description = "")
  public Integer getPageFrom() {
    return pageFrom;
  }

  public void setPageFrom(Integer pageFrom) {
    this.pageFrom = pageFrom;
  }

  public WebapiWatermarkBody pageTo(Integer pageTo) {
    this.pageTo = pageTo;
    return this;
  }

   /**
   * Get pageTo
   * @return pageTo
  **/
  @Schema(description = "")
  public Integer getPageTo() {
    return pageTo;
  }

  public void setPageTo(Integer pageTo) {
    this.pageTo = pageTo;
  }

  public WebapiWatermarkBody files(List<File> files) {
    this.files = files;
    return this;
  }

  public WebapiWatermarkBody addFilesItem(File filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<File>();
    }
    this.files.add(filesItem);
    return this;
  }

   /**
   * Get files
   * @return files
  **/
  @Schema(description = "")
  public List<File> getFiles() {
    return files;
  }

  public void setFiles(List<File> files) {
    this.files = files;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebapiWatermarkBody webapiWatermarkBody = (WebapiWatermarkBody) o;
    return Objects.equals(this.isText, webapiWatermarkBody.isText) &&
        Objects.equals(this.text, webapiWatermarkBody.text) &&
        Objects.equals(this.name, webapiWatermarkBody.name) &&
        Objects.equals(this.size, webapiWatermarkBody.size) &&
        Objects.equals(this.bold, webapiWatermarkBody.bold) &&
        Objects.equals(this.italic, webapiWatermarkBody.italic) &&
        Objects.equals(this.underlined, webapiWatermarkBody.underlined) &&
        Objects.equals(this.color, webapiWatermarkBody.color) &&
        Objects.equals(this.contentType, webapiWatermarkBody.contentType) &&
        Objects.equals(this.contentDisposition, webapiWatermarkBody.contentDisposition) &&
        Objects.equals(this.headers, webapiWatermarkBody.headers) &&
        Objects.equals(this.length, webapiWatermarkBody.length) &&
        Objects.equals(this.name, webapiWatermarkBody.name) &&
        Objects.equals(this.fileName, webapiWatermarkBody.fileName) &&
        Objects.equals(this.isBackground, webapiWatermarkBody.isBackground) &&
        Objects.equals(this.rotation, webapiWatermarkBody.rotation) &&
        Objects.equals(this.transparency, webapiWatermarkBody.transparency) &&
        Objects.equals(this.layer, webapiWatermarkBody.layer) &&
        Objects.equals(this.pageFrom, webapiWatermarkBody.pageFrom) &&
        Objects.equals(this.pageTo, webapiWatermarkBody.pageTo) &&
        Objects.equals(this.files, webapiWatermarkBody.files);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isText, text, name, size, bold, italic, underlined, color, contentType, contentDisposition, headers, length, name, fileName, isBackground, rotation, transparency, layer, pageFrom, pageTo, files);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebapiWatermarkBody {\n");
    
    sb.append("    isText: ").append(toIndentedString(isText)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    bold: ").append(toIndentedString(bold)).append("\n");
    sb.append("    italic: ").append(toIndentedString(italic)).append("\n");
    sb.append("    underlined: ").append(toIndentedString(underlined)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    contentDisposition: ").append(toIndentedString(contentDisposition)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    isBackground: ").append(toIndentedString(isBackground)).append("\n");
    sb.append("    rotation: ").append(toIndentedString(rotation)).append("\n");
    sb.append("    transparency: ").append(toIndentedString(transparency)).append("\n");
    sb.append("    layer: ").append(toIndentedString(layer)).append("\n");
    sb.append("    pageFrom: ").append(toIndentedString(pageFrom)).append("\n");
    sb.append("    pageTo: ").append(toIndentedString(pageTo)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
