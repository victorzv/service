/*
 * Aspose.Pdf RestApi
 * Demo 1
 *
 * OpenAPI spec version: v1
 * Contact: Evgeny.Pirogov@aspose.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import io.swagger.client.model.FileResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApiApi {
    private ApiClient apiClient;

    public ApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApiApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for pdfWebapiAddnumberPost
     * @param files  (optional)
     * @param vAlignment The vertical alignment of the page numbers. (optional)
     * @param hAlignment The horizontal alignment of the page numbers. (optional)
     * @param startingNumber The starting number for the page numbers. (optional)
     * @param sNumber The number of the first page to start numbering from. (optional)
     * @param fNumber The number of the last page to end numbering at. (optional)
     * @param margin The margin around the page numbers. (optional)
     * @param fontSize The font size of the page numbers. (optional)
     * @param format The format of the page numbers. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiAddnumberPostCall(List<File> files, String vAlignment, String hAlignment, Integer startingNumber, Integer sNumber, Integer fNumber, Integer margin, Integer fontSize, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/addnumber";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (vAlignment != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vAlignment", vAlignment));
        if (hAlignment != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hAlignment", hAlignment));
        if (startingNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startingNumber", startingNumber));
        if (sNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sNumber", sNumber));
        if (fNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fNumber", fNumber));
        if (margin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("margin", margin));
        if (fontSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fontSize", fontSize));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiAddnumberPostValidateBeforeCall(List<File> files, String vAlignment, String hAlignment, Integer startingNumber, Integer sNumber, Integer fNumber, Integer margin, Integer fontSize, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiAddnumberPostCall(files, vAlignment, hAlignment, startingNumber, sNumber, fNumber, margin, fontSize, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Adds page numbers to the provided documents with the specified alignment, starting number, and format.
     * This endpoint is used to add page numbers to the provided files with the specified alignment, starting number, and format.  If the addition is started, the response will contain a success status and an optional message.  If the addition fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param vAlignment The vertical alignment of the page numbers. (optional)
     * @param hAlignment The horizontal alignment of the page numbers. (optional)
     * @param startingNumber The starting number for the page numbers. (optional)
     * @param sNumber The number of the first page to start numbering from. (optional)
     * @param fNumber The number of the last page to end numbering at. (optional)
     * @param margin The margin around the page numbers. (optional)
     * @param fontSize The font size of the page numbers. (optional)
     * @param format The format of the page numbers. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiAddnumberPost(List<File> files, String vAlignment, String hAlignment, Integer startingNumber, Integer sNumber, Integer fNumber, Integer margin, Integer fontSize, String format) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiAddnumberPostWithHttpInfo(files, vAlignment, hAlignment, startingNumber, sNumber, fNumber, margin, fontSize, format);
        return resp.getData();
    }

    /**
     * Adds page numbers to the provided documents with the specified alignment, starting number, and format.
     * This endpoint is used to add page numbers to the provided files with the specified alignment, starting number, and format.  If the addition is started, the response will contain a success status and an optional message.  If the addition fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param vAlignment The vertical alignment of the page numbers. (optional)
     * @param hAlignment The horizontal alignment of the page numbers. (optional)
     * @param startingNumber The starting number for the page numbers. (optional)
     * @param sNumber The number of the first page to start numbering from. (optional)
     * @param fNumber The number of the last page to end numbering at. (optional)
     * @param margin The margin around the page numbers. (optional)
     * @param fontSize The font size of the page numbers. (optional)
     * @param format The format of the page numbers. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiAddnumberPostWithHttpInfo(List<File> files, String vAlignment, String hAlignment, Integer startingNumber, Integer sNumber, Integer fNumber, Integer margin, Integer fontSize, String format) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiAddnumberPostValidateBeforeCall(files, vAlignment, hAlignment, startingNumber, sNumber, fNumber, margin, fontSize, format, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds page numbers to the provided documents with the specified alignment, starting number, and format. (asynchronously)
     * This endpoint is used to add page numbers to the provided files with the specified alignment, starting number, and format.  If the addition is started, the response will contain a success status and an optional message.  If the addition fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param vAlignment The vertical alignment of the page numbers. (optional)
     * @param hAlignment The horizontal alignment of the page numbers. (optional)
     * @param startingNumber The starting number for the page numbers. (optional)
     * @param sNumber The number of the first page to start numbering from. (optional)
     * @param fNumber The number of the last page to end numbering at. (optional)
     * @param margin The margin around the page numbers. (optional)
     * @param fontSize The font size of the page numbers. (optional)
     * @param format The format of the page numbers. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiAddnumberPostAsync(List<File> files, String vAlignment, String hAlignment, Integer startingNumber, Integer sNumber, Integer fNumber, Integer margin, Integer fontSize, String format, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiAddnumberPostValidateBeforeCall(files, vAlignment, hAlignment, startingNumber, sNumber, fNumber, margin, fontSize, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiBinaryComparisonPost
     * @param files  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiBinaryComparisonPostCall(List<File> files, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/BinaryComparison";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiBinaryComparisonPostValidateBeforeCall(List<File> files, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiBinaryComparisonPostCall(files, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Performs a binary comparison on the provided files.
     * This endpoint is used to perform a binary comparison on the provided files.  If the comparison is started, the response will contain a success status and an optional message.  If the comparison fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiBinaryComparisonPost(List<File> files) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiBinaryComparisonPostWithHttpInfo(files);
        return resp.getData();
    }

    /**
     * Performs a binary comparison on the provided files.
     * This endpoint is used to perform a binary comparison on the provided files.  If the comparison is started, the response will contain a success status and an optional message.  If the comparison fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiBinaryComparisonPostWithHttpInfo(List<File> files) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiBinaryComparisonPostValidateBeforeCall(files, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Performs a binary comparison on the provided files. (asynchronously)
     * This endpoint is used to perform a binary comparison on the provided files.  If the comparison is started, the response will contain a success status and an optional message.  If the comparison fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiBinaryComparisonPostAsync(List<File> files, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiBinaryComparisonPostValidateBeforeCall(files, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiChatpdfPost
     * @param files  (optional)
     * @param mode The mode of operation for the PDF generation. (optional)
     * @param question The question to be included in the PDF. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiChatpdfPostCall(List<File> files, Integer mode, String question, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/chatpdf";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (mode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mode", mode));
        if (question != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("question", question));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiChatpdfPostValidateBeforeCall(List<File> files, Integer mode, String question, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiChatpdfPostCall(files, mode, question, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Generates a PDF document based on the provided files and question.
     * This endpoint is used to generate a PDF document based on the provided files and question.  If the generation is started, the response will contain a success status and an optional message.  If the generation fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param mode The mode of operation for the PDF generation. (optional)
     * @param question The question to be included in the PDF. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiChatpdfPost(List<File> files, Integer mode, String question) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiChatpdfPostWithHttpInfo(files, mode, question);
        return resp.getData();
    }

    /**
     * Generates a PDF document based on the provided files and question.
     * This endpoint is used to generate a PDF document based on the provided files and question.  If the generation is started, the response will contain a success status and an optional message.  If the generation fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param mode The mode of operation for the PDF generation. (optional)
     * @param question The question to be included in the PDF. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiChatpdfPostWithHttpInfo(List<File> files, Integer mode, String question) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiChatpdfPostValidateBeforeCall(files, mode, question, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Generates a PDF document based on the provided files and question. (asynchronously)
     * This endpoint is used to generate a PDF document based on the provided files and question.  If the generation is started, the response will contain a success status and an optional message.  If the generation fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param mode The mode of operation for the PDF generation. (optional)
     * @param question The question to be included in the PDF. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiChatpdfPostAsync(List<File> files, Integer mode, String question, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiChatpdfPostValidateBeforeCall(files, mode, question, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiComparisonPost
     * @param files  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiComparisonPostCall(List<File> files, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/Comparison";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiComparisonPostValidateBeforeCall(List<File> files, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiComparisonPostCall(files, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Compare provided files and create document with marked changes.
     * This endpoint is used to compare the provided files.  If the comparison is started, the response will contain a success status and an optional message.  If the comparison fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiComparisonPost(List<File> files) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiComparisonPostWithHttpInfo(files);
        return resp.getData();
    }

    /**
     * Compare provided files and create document with marked changes.
     * This endpoint is used to compare the provided files.  If the comparison is started, the response will contain a success status and an optional message.  If the comparison fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiComparisonPostWithHttpInfo(List<File> files) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiComparisonPostValidateBeforeCall(files, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Compare provided files and create document with marked changes. (asynchronously)
     * This endpoint is used to compare the provided files.  If the comparison is started, the response will contain a success status and an optional message.  If the comparison fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiComparisonPostAsync(List<File> files, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiComparisonPostValidateBeforeCall(files, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiCompressPost
     * @param files  (optional)
     * @param compressType The level of compression to use. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiCompressPostCall(List<File> files, Integer compressType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/compress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (compressType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("compressType", compressType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiCompressPostValidateBeforeCall(List<File> files, Integer compressType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiCompressPostCall(files, compressType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Compresses the provided files using the specified compression level.
     * This endpoint is used to compress the provided files using the specified compression level.  If the compression is started, the response will contain a success status and an optional message.  If the compression fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param compressType The level of compression to use. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiCompressPost(List<File> files, Integer compressType) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiCompressPostWithHttpInfo(files, compressType);
        return resp.getData();
    }

    /**
     * Compresses the provided files using the specified compression level.
     * This endpoint is used to compress the provided files using the specified compression level.  If the compression is started, the response will contain a success status and an optional message.  If the compression fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param compressType The level of compression to use. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiCompressPostWithHttpInfo(List<File> files, Integer compressType) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiCompressPostValidateBeforeCall(files, compressType, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Compresses the provided files using the specified compression level. (asynchronously)
     * This endpoint is used to compress the provided files using the specified compression level.  If the compression is started, the response will contain a success status and an optional message.  If the compression fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param compressType The level of compression to use. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiCompressPostAsync(List<File> files, Integer compressType, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiCompressPostValidateBeforeCall(files, compressType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiConvertPost
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param xmlType The type of XML conversion to perform, if applicable. (optional)
     * @param xmlTag The XML tag to use for conversion, if applicable. (optional)
     * @param fontSise  (optional)
     * @param isToSingle Indicates whether the conversion should result in a single file, if applicable. (optional)
     * @param separator The separator to use when converting, if applicable. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiConvertPostCall(List<File> files, String inputType, String outputType, Integer xmlType, String xmlTag, Integer fontSise, Boolean isToSingle, String separator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/convert";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inputType", inputType));
        if (outputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outputType", outputType));
        if (xmlType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("xmlType", xmlType));
        if (xmlTag != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("xmlTag", xmlTag));
        if (fontSise != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fontSise", fontSise));
        if (isToSingle != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isToSingle", isToSingle));
        if (separator != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("separator", separator));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiConvertPostValidateBeforeCall(List<File> files, String inputType, String outputType, Integer xmlType, String xmlTag, Integer fontSise, Boolean isToSingle, String separator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiConvertPostCall(files, inputType, outputType, xmlType, xmlTag, fontSise, isToSingle, separator, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Converts the provided files from one format to another, with options for XML conversion and font size adjustment.
     * This endpoint is used to convert the provided files from one format to another.  If the conversion is started, the response will contain a success status and an optional message.  If the conversion fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param xmlType The type of XML conversion to perform, if applicable. (optional)
     * @param xmlTag The XML tag to use for conversion, if applicable. (optional)
     * @param fontSise  (optional)
     * @param isToSingle Indicates whether the conversion should result in a single file, if applicable. (optional)
     * @param separator The separator to use when converting, if applicable. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiConvertPost(List<File> files, String inputType, String outputType, Integer xmlType, String xmlTag, Integer fontSise, Boolean isToSingle, String separator) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiConvertPostWithHttpInfo(files, inputType, outputType, xmlType, xmlTag, fontSise, isToSingle, separator);
        return resp.getData();
    }

    /**
     * Converts the provided files from one format to another, with options for XML conversion and font size adjustment.
     * This endpoint is used to convert the provided files from one format to another.  If the conversion is started, the response will contain a success status and an optional message.  If the conversion fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param xmlType The type of XML conversion to perform, if applicable. (optional)
     * @param xmlTag The XML tag to use for conversion, if applicable. (optional)
     * @param fontSise  (optional)
     * @param isToSingle Indicates whether the conversion should result in a single file, if applicable. (optional)
     * @param separator The separator to use when converting, if applicable. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiConvertPostWithHttpInfo(List<File> files, String inputType, String outputType, Integer xmlType, String xmlTag, Integer fontSise, Boolean isToSingle, String separator) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiConvertPostValidateBeforeCall(files, inputType, outputType, xmlType, xmlTag, fontSise, isToSingle, separator, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts the provided files from one format to another, with options for XML conversion and font size adjustment. (asynchronously)
     * This endpoint is used to convert the provided files from one format to another.  If the conversion is started, the response will contain a success status and an optional message.  If the conversion fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param xmlType The type of XML conversion to perform, if applicable. (optional)
     * @param xmlTag The XML tag to use for conversion, if applicable. (optional)
     * @param fontSise  (optional)
     * @param isToSingle Indicates whether the conversion should result in a single file, if applicable. (optional)
     * @param separator The separator to use when converting, if applicable. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiConvertPostAsync(List<File> files, String inputType, String outputType, Integer xmlType, String xmlTag, Integer fontSise, Boolean isToSingle, String separator, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiConvertPostValidateBeforeCall(files, inputType, outputType, xmlType, xmlTag, fontSise, isToSingle, separator, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiConvertWebpagePost
     * @param webPage  (optional)
     * @param outputType The desired format for the output file. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiConvertWebpagePostCall(String webPage, String outputType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/convert-webpage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outputType", outputType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (webPage != null)
        localVarFormParams.put("webPage", webPage);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiConvertWebpagePostValidateBeforeCall(String webPage, String outputType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiConvertWebpagePostCall(webPage, outputType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Converts a web page to the specified output format.
     * This endpoint is used to convert a web page to the specified output format.  If the conversion is started, the response will contain a success status and an optional message.  If the conversion fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param webPage  (optional)
     * @param outputType The desired format for the output file. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiConvertWebpagePost(String webPage, String outputType) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiConvertWebpagePostWithHttpInfo(webPage, outputType);
        return resp.getData();
    }

    /**
     * Converts a web page to the specified output format.
     * This endpoint is used to convert a web page to the specified output format.  If the conversion is started, the response will contain a success status and an optional message.  If the conversion fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param webPage  (optional)
     * @param outputType The desired format for the output file. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiConvertWebpagePostWithHttpInfo(String webPage, String outputType) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiConvertWebpagePostValidateBeforeCall(webPage, outputType, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts a web page to the specified output format. (asynchronously)
     * This endpoint is used to convert a web page to the specified output format.  If the conversion is started, the response will contain a success status and an optional message.  If the conversion fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param webPage  (optional)
     * @param outputType The desired format for the output file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiConvertWebpagePostAsync(String webPage, String outputType, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiConvertWebpagePostValidateBeforeCall(webPage, outputType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiCropPost
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param top The number of pixels to crop from the top. (optional)
     * @param right The number of pixels to crop from the right. (optional)
     * @param bottom The number of pixels to crop from the bottom. (optional)
     * @param left The number of pixels to crop from the left. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiCropPostCall(List<File> files, String inputType, Integer top, Integer right, Integer bottom, Integer left, String outputType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/crop";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inputType", inputType));
        if (top != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("top", top));
        if (right != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("right", right));
        if (bottom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bottom", bottom));
        if (left != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("left", left));
        if (outputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outputType", outputType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiCropPostValidateBeforeCall(List<File> files, String inputType, Integer top, Integer right, Integer bottom, Integer left, String outputType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiCropPostCall(files, inputType, top, right, bottom, left, outputType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Crops the provided files to the specified dimensions.
     * This endpoint is used to crop the provided files to the specified dimensions.  If the cropping is started, the response will contain a success status and an optional message.  If the cropping fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param top The number of pixels to crop from the top. (optional)
     * @param right The number of pixels to crop from the right. (optional)
     * @param bottom The number of pixels to crop from the bottom. (optional)
     * @param left The number of pixels to crop from the left. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiCropPost(List<File> files, String inputType, Integer top, Integer right, Integer bottom, Integer left, String outputType) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiCropPostWithHttpInfo(files, inputType, top, right, bottom, left, outputType);
        return resp.getData();
    }

    /**
     * Crops the provided files to the specified dimensions.
     * This endpoint is used to crop the provided files to the specified dimensions.  If the cropping is started, the response will contain a success status and an optional message.  If the cropping fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param top The number of pixels to crop from the top. (optional)
     * @param right The number of pixels to crop from the right. (optional)
     * @param bottom The number of pixels to crop from the bottom. (optional)
     * @param left The number of pixels to crop from the left. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiCropPostWithHttpInfo(List<File> files, String inputType, Integer top, Integer right, Integer bottom, Integer left, String outputType) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiCropPostValidateBeforeCall(files, inputType, top, right, bottom, left, outputType, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Crops the provided files to the specified dimensions. (asynchronously)
     * This endpoint is used to crop the provided files to the specified dimensions.  If the cropping is started, the response will contain a success status and an optional message.  If the cropping fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param top The number of pixels to crop from the top. (optional)
     * @param right The number of pixels to crop from the right. (optional)
     * @param bottom The number of pixels to crop from the bottom. (optional)
     * @param left The number of pixels to crop from the left. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiCropPostAsync(List<File> files, String inputType, Integer top, Integer right, Integer bottom, Integer left, String outputType, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiCropPostValidateBeforeCall(files, inputType, top, right, bottom, left, outputType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiDownloadIdGet
     * @param id The id of the processing to download. (required)
     * @param file The name of the file to download. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiDownloadIdGetCall(String id, String file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/download/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (file != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("file", file));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiDownloadIdGetValidateBeforeCall(String id, String file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling pdfWebapiDownloadIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = pdfWebapiDownloadIdGetCall(id, file, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Downloads a file.
     * 
     * @param id The id of the processing to download. (required)
     * @param file The name of the file to download. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void pdfWebapiDownloadIdGet(String id, String file) throws ApiException {
        pdfWebapiDownloadIdGetWithHttpInfo(id, file);
    }

    /**
     * Downloads a file.
     * 
     * @param id The id of the processing to download. (required)
     * @param file The name of the file to download. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> pdfWebapiDownloadIdGetWithHttpInfo(String id, String file) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiDownloadIdGetValidateBeforeCall(id, file, null, null);
        return apiClient.execute(call);
    }

    /**
     * Downloads a file. (asynchronously)
     * 
     * @param id The id of the processing to download. (required)
     * @param file The name of the file to download. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiDownloadIdGetAsync(String id, String file, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiDownloadIdGetValidateBeforeCall(id, file, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiDownloadStreamIdPost
     * @param id The ID of the processing to download. (required)
     * @param fileName The name of the file to download. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiDownloadStreamIdPostCall(String id, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/download-stream/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fileName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fileName", fileName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiDownloadStreamIdPostValidateBeforeCall(String id, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling pdfWebapiDownloadStreamIdPost(Async)");
        }
        
        com.squareup.okhttp.Call call = pdfWebapiDownloadStreamIdPostCall(id, fileName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Downloads a file as a stream.
     * 
     * @param id The ID of the processing to download. (required)
     * @param fileName The name of the file to download. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiDownloadStreamIdPost(String id, String fileName) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiDownloadStreamIdPostWithHttpInfo(id, fileName);
        return resp.getData();
    }

    /**
     * Downloads a file as a stream.
     * 
     * @param id The ID of the processing to download. (required)
     * @param fileName The name of the file to download. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiDownloadStreamIdPostWithHttpInfo(String id, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiDownloadStreamIdPostValidateBeforeCall(id, fileName, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Downloads a file as a stream. (asynchronously)
     * 
     * @param id The ID of the processing to download. (required)
     * @param fileName The name of the file to download. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiDownloadStreamIdPostAsync(String id, String fileName, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiDownloadStreamIdPostValidateBeforeCall(id, fileName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiEsignPost
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param passw The password to use for electronic signing. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiEsignPostCall(List<File> files, String inputType, String passw, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/esign";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inputType", inputType));
        if (passw != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("passw", passw));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiEsignPostValidateBeforeCall(List<File> files, String inputType, String passw, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiEsignPostCall(files, inputType, passw, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Electronically signs the provided files with the specified certificate and its password.
     * This endpoint is used to electronically sign the provided files with the specified certificate and its password.  If the signing is started, the response will contain a success status and an optional message.  If the signing fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param passw The password to use for electronic signing. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiEsignPost(List<File> files, String inputType, String passw) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiEsignPostWithHttpInfo(files, inputType, passw);
        return resp.getData();
    }

    /**
     * Electronically signs the provided files with the specified certificate and its password.
     * This endpoint is used to electronically sign the provided files with the specified certificate and its password.  If the signing is started, the response will contain a success status and an optional message.  If the signing fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param passw The password to use for electronic signing. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiEsignPostWithHttpInfo(List<File> files, String inputType, String passw) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiEsignPostValidateBeforeCall(files, inputType, passw, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Electronically signs the provided files with the specified certificate and its password. (asynchronously)
     * This endpoint is used to electronically sign the provided files with the specified certificate and its password.  If the signing is started, the response will contain a success status and an optional message.  If the signing fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param passw The password to use for electronic signing. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiEsignPostAsync(List<File> files, String inputType, String passw, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiEsignPostValidateBeforeCall(files, inputType, passw, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiExtractPost
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiExtractPostCall(List<File> files, String inputType, String outputType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/extract";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inputType", inputType));
        if (outputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outputType", outputType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiExtractPostValidateBeforeCall(List<File> files, String inputType, String outputType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiExtractPostCall(files, inputType, outputType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Extracts tables from the provided documents and converts them to the specified output format.
     * This endpoint is used to extract tables from the provided files and convert them to the specified output format.  If the extraction is started, the response will contain a success status and an optional message.  If the extraction fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiExtractPost(List<File> files, String inputType, String outputType) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiExtractPostWithHttpInfo(files, inputType, outputType);
        return resp.getData();
    }

    /**
     * Extracts tables from the provided documents and converts them to the specified output format.
     * This endpoint is used to extract tables from the provided files and convert them to the specified output format.  If the extraction is started, the response will contain a success status and an optional message.  If the extraction fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiExtractPostWithHttpInfo(List<File> files, String inputType, String outputType) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiExtractPostValidateBeforeCall(files, inputType, outputType, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extracts tables from the provided documents and converts them to the specified output format. (asynchronously)
     * This endpoint is used to extract tables from the provided files and convert them to the specified output format.  If the extraction is started, the response will contain a success status and an optional message.  If the extraction fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiExtractPostAsync(List<File> files, String inputType, String outputType, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiExtractPostValidateBeforeCall(files, inputType, outputType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiFormFillerPost
     * @param files  (optional)
     * @param fileName The name of the file to fill the form with. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiFormFillerPostCall(List<File> files, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/form-filler";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fileName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fileName", fileName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiFormFillerPostValidateBeforeCall(List<File> files, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiFormFillerPostCall(files, fileName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fills a form with the provided files.
     * This endpoint is used to fill a form with the provided files.  If the filling is started, the response will contain a success status and an optional message.  If the filling fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param fileName The name of the file to fill the form with. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiFormFillerPost(List<File> files, String fileName) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiFormFillerPostWithHttpInfo(files, fileName);
        return resp.getData();
    }

    /**
     * Fills a form with the provided files.
     * This endpoint is used to fill a form with the provided files.  If the filling is started, the response will contain a success status and an optional message.  If the filling fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param fileName The name of the file to fill the form with. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiFormFillerPostWithHttpInfo(List<File> files, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiFormFillerPostValidateBeforeCall(files, fileName, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fills a form with the provided files. (asynchronously)
     * This endpoint is used to fill a form with the provided files.  If the filling is started, the response will contain a success status and an optional message.  If the filling fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param fileName The name of the file to fill the form with. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiFormFillerPostAsync(List<File> files, String fileName, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiFormFillerPostValidateBeforeCall(files, fileName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiGifPost
     * @param keepImagesAsIs Indicates whether the images should be kept as is. (optional)
     * @param resizeToImage The index of the image to resize the other images to. (optional)
     * @param streched  (optional)
     * @param width The width of the GIF. (optional)
     * @param height The height of the GIF. (optional)
     * @param frameTimes The times for each frame in the GIF. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiGifPostCall(Boolean keepImagesAsIs, Integer resizeToImage, Boolean streched, Integer width, Integer height, String frameTimes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/gif";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keepImagesAsIs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("keepImagesAsIs", keepImagesAsIs));
        if (resizeToImage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resizeToImage", resizeToImage));
        if (streched != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("streched", streched));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (frameTimes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("frameTimes", frameTimes));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiGifPostValidateBeforeCall(Boolean keepImagesAsIs, Integer resizeToImage, Boolean streched, Integer width, Integer height, String frameTimes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiGifPostCall(keepImagesAsIs, resizeToImage, streched, width, height, frameTimes, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a GIF from the provided images.
     * This endpoint is used to create a GIF from the provided images.  If the creation is started, the response will contain a success status and an optional message.  If the creation fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param keepImagesAsIs Indicates whether the images should be kept as is. (optional)
     * @param resizeToImage The index of the image to resize the other images to. (optional)
     * @param streched  (optional)
     * @param width The width of the GIF. (optional)
     * @param height The height of the GIF. (optional)
     * @param frameTimes The times for each frame in the GIF. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiGifPost(Boolean keepImagesAsIs, Integer resizeToImage, Boolean streched, Integer width, Integer height, String frameTimes) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiGifPostWithHttpInfo(keepImagesAsIs, resizeToImage, streched, width, height, frameTimes);
        return resp.getData();
    }

    /**
     * Creates a GIF from the provided images.
     * This endpoint is used to create a GIF from the provided images.  If the creation is started, the response will contain a success status and an optional message.  If the creation fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param keepImagesAsIs Indicates whether the images should be kept as is. (optional)
     * @param resizeToImage The index of the image to resize the other images to. (optional)
     * @param streched  (optional)
     * @param width The width of the GIF. (optional)
     * @param height The height of the GIF. (optional)
     * @param frameTimes The times for each frame in the GIF. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiGifPostWithHttpInfo(Boolean keepImagesAsIs, Integer resizeToImage, Boolean streched, Integer width, Integer height, String frameTimes) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiGifPostValidateBeforeCall(keepImagesAsIs, resizeToImage, streched, width, height, frameTimes, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a GIF from the provided images. (asynchronously)
     * This endpoint is used to create a GIF from the provided images.  If the creation is started, the response will contain a success status and an optional message.  If the creation fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param keepImagesAsIs Indicates whether the images should be kept as is. (optional)
     * @param resizeToImage The index of the image to resize the other images to. (optional)
     * @param streched  (optional)
     * @param width The width of the GIF. (optional)
     * @param height The height of the GIF. (optional)
     * @param frameTimes The times for each frame in the GIF. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiGifPostAsync(Boolean keepImagesAsIs, Integer resizeToImage, Boolean streched, Integer width, Integer height, String frameTimes, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiGifPostValidateBeforeCall(keepImagesAsIs, resizeToImage, streched, width, height, frameTimes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiHashPost
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param alg The hashing algorithm to use. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiHashPostCall(List<File> files, String inputType, String outputType, String alg, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/hash";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inputType", inputType));
        if (outputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outputType", outputType));
        if (alg != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("alg", alg));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiHashPostValidateBeforeCall(List<File> files, String inputType, String outputType, String alg, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiHashPostCall(files, inputType, outputType, alg, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Hashes the provided files using the specified algorithm.
     * This endpoint is used to hash the provided files using the specified algorithm.  If the hashing is started, the response will contain a success status and an optional message.  If the hashing fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param alg The hashing algorithm to use. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiHashPost(List<File> files, String inputType, String outputType, String alg) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiHashPostWithHttpInfo(files, inputType, outputType, alg);
        return resp.getData();
    }

    /**
     * Hashes the provided files using the specified algorithm.
     * This endpoint is used to hash the provided files using the specified algorithm.  If the hashing is started, the response will contain a success status and an optional message.  If the hashing fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param alg The hashing algorithm to use. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiHashPostWithHttpInfo(List<File> files, String inputType, String outputType, String alg) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiHashPostValidateBeforeCall(files, inputType, outputType, alg, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Hashes the provided files using the specified algorithm. (asynchronously)
     * This endpoint is used to hash the provided files using the specified algorithm.  If the hashing is started, the response will contain a success status and an optional message.  If the hashing fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param alg The hashing algorithm to use. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiHashPostAsync(List<File> files, String inputType, String outputType, String alg, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiHashPostValidateBeforeCall(files, inputType, outputType, alg, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiLockPost
     * @param files  (optional)
     * @param passw The password required to lock the resource. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiLockPostCall(List<File> files, String passw, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/lock";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (passw != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("passw", passw));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiLockPostValidateBeforeCall(List<File> files, String passw, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiLockPostCall(files, passw, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Locks a document with the provided password and optional files.
     * This endpoint is used to lock a resource with an optional password and associated files.  If the lock is started, the response will contain a success status and processing id.  If the lock fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param passw The password required to lock the resource. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiLockPost(List<File> files, String passw) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiLockPostWithHttpInfo(files, passw);
        return resp.getData();
    }

    /**
     * Locks a document with the provided password and optional files.
     * This endpoint is used to lock a resource with an optional password and associated files.  If the lock is started, the response will contain a success status and processing id.  If the lock fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param passw The password required to lock the resource. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiLockPostWithHttpInfo(List<File> files, String passw) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiLockPostValidateBeforeCall(files, passw, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Locks a document with the provided password and optional files. (asynchronously)
     * This endpoint is used to lock a resource with an optional password and associated files.  If the lock is started, the response will contain a success status and processing id.  If the lock fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param passw The password required to lock the resource. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiLockPostAsync(List<File> files, String passw, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiLockPostValidateBeforeCall(files, passw, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiMergePost
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output file. (optional)
     * @param horizontal The number of images to merge horizontally, if applicable. (optional)
     * @param vertical The number of images to merge vertically, if applicable. (optional)
     * @param pageSize The page size for the output file, if applicable. (optional)
     * @param dcIsLandscape Indicates whether the output file should be in landscape orientation. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiMergePostCall(List<File> files, String inputType, String outputType, Integer horizontal, Integer vertical, String pageSize, Boolean dcIsLandscape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/merge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inputType", inputType));
        if (outputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outputType", outputType));
        if (horizontal != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("horizontal", horizontal));
        if (vertical != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vertical", vertical));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (dcIsLandscape != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dc_isLandscape", dcIsLandscape));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiMergePostValidateBeforeCall(List<File> files, String inputType, String outputType, Integer horizontal, Integer vertical, String pageSize, Boolean dcIsLandscape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiMergePostCall(files, inputType, outputType, horizontal, vertical, pageSize, dcIsLandscape, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Merges the provided files into a single document or image, with options for orientation and page size.
     * This endpoint is used to merge the provided files into a single document or image.  If the merge is started, the response will contain a success status and an optional message.  If the merge fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output file. (optional)
     * @param horizontal The number of images to merge horizontally, if applicable. (optional)
     * @param vertical The number of images to merge vertically, if applicable. (optional)
     * @param pageSize The page size for the output file, if applicable. (optional)
     * @param dcIsLandscape Indicates whether the output file should be in landscape orientation. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiMergePost(List<File> files, String inputType, String outputType, Integer horizontal, Integer vertical, String pageSize, Boolean dcIsLandscape) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiMergePostWithHttpInfo(files, inputType, outputType, horizontal, vertical, pageSize, dcIsLandscape);
        return resp.getData();
    }

    /**
     * Merges the provided files into a single document or image, with options for orientation and page size.
     * This endpoint is used to merge the provided files into a single document or image.  If the merge is started, the response will contain a success status and an optional message.  If the merge fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output file. (optional)
     * @param horizontal The number of images to merge horizontally, if applicable. (optional)
     * @param vertical The number of images to merge vertically, if applicable. (optional)
     * @param pageSize The page size for the output file, if applicable. (optional)
     * @param dcIsLandscape Indicates whether the output file should be in landscape orientation. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiMergePostWithHttpInfo(List<File> files, String inputType, String outputType, Integer horizontal, Integer vertical, String pageSize, Boolean dcIsLandscape) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiMergePostValidateBeforeCall(files, inputType, outputType, horizontal, vertical, pageSize, dcIsLandscape, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Merges the provided files into a single document or image, with options for orientation and page size. (asynchronously)
     * This endpoint is used to merge the provided files into a single document or image.  If the merge is started, the response will contain a success status and an optional message.  If the merge fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output file. (optional)
     * @param horizontal The number of images to merge horizontally, if applicable. (optional)
     * @param vertical The number of images to merge vertically, if applicable. (optional)
     * @param pageSize The page size for the output file, if applicable. (optional)
     * @param dcIsLandscape Indicates whether the output file should be in landscape orientation. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiMergePostAsync(List<File> files, String inputType, String outputType, Integer horizontal, Integer vertical, String pageSize, Boolean dcIsLandscape, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiMergePostValidateBeforeCall(files, inputType, outputType, horizontal, vertical, pageSize, dcIsLandscape, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiMetadataPost
     * @param files  (optional)
     * @param operation  (optional)
     * @param folder The folder where the files are located. (optional)
     * @param name The name of the file to perform the operation on. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiMetadataPostCall(List<File> files, String operation, String folder, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/metadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (operation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operation", operation));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiMetadataPostValidateBeforeCall(List<File> files, String operation, String folder, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiMetadataPostCall(files, operation, folder, name, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Performs metadata operations on the provided files.
     * This endpoint is used to perform metadata operations on the provided files.  If the operation is started, the response will contain a success status and an optional message.  If the operation fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param operation  (optional)
     * @param folder The folder where the files are located. (optional)
     * @param name The name of the file to perform the operation on. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiMetadataPost(List<File> files, String operation, String folder, String name) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiMetadataPostWithHttpInfo(files, operation, folder, name);
        return resp.getData();
    }

    /**
     * Performs metadata operations on the provided files.
     * This endpoint is used to perform metadata operations on the provided files.  If the operation is started, the response will contain a success status and an optional message.  If the operation fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param operation  (optional)
     * @param folder The folder where the files are located. (optional)
     * @param name The name of the file to perform the operation on. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiMetadataPostWithHttpInfo(List<File> files, String operation, String folder, String name) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiMetadataPostValidateBeforeCall(files, operation, folder, name, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Performs metadata operations on the provided files. (asynchronously)
     * This endpoint is used to perform metadata operations on the provided files.  If the operation is started, the response will contain a success status and an optional message.  If the operation fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param operation  (optional)
     * @param folder The folder where the files are located. (optional)
     * @param name The name of the file to perform the operation on. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiMetadataPostAsync(List<File> files, String operation, String folder, String name, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiMetadataPostValidateBeforeCall(files, operation, folder, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiMusicVideoPost
     * @param files  (optional)
     * @param interval The interval between frames in the music video. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiMusicVideoPostCall(List<File> files, Integer interval, String outputType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/music-video";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (interval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("interval", interval));
        if (outputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outputType", outputType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiMusicVideoPostValidateBeforeCall(List<File> files, Integer interval, String outputType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiMusicVideoPostCall(files, interval, outputType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a music video from the provided files.
     * This endpoint is used to create a music video from the provided files.  If the creation is started, the response will contain a success status and an optional message.  If the creation fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param interval The interval between frames in the music video. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiMusicVideoPost(List<File> files, Integer interval, String outputType) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiMusicVideoPostWithHttpInfo(files, interval, outputType);
        return resp.getData();
    }

    /**
     * Creates a music video from the provided files.
     * This endpoint is used to create a music video from the provided files.  If the creation is started, the response will contain a success status and an optional message.  If the creation fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param interval The interval between frames in the music video. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiMusicVideoPostWithHttpInfo(List<File> files, Integer interval, String outputType) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiMusicVideoPostValidateBeforeCall(files, interval, outputType, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a music video from the provided files. (asynchronously)
     * This endpoint is used to create a music video from the provided files.  If the creation is started, the response will contain a success status and an optional message.  If the creation fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param interval The interval between frames in the music video. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiMusicVideoPostAsync(List<File> files, Integer interval, String outputType, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiMusicVideoPostValidateBeforeCall(files, interval, outputType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiOrganizePost
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param remove The pages to remove from the document. (optional)
     * @param move The pages to move within the document. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiOrganizePostCall(List<File> files, String inputType, String remove, String move, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/Organize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inputType", inputType));
        if (remove != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("remove", remove));
        if (move != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("move", move));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiOrganizePostValidateBeforeCall(List<File> files, String inputType, String remove, String move, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiOrganizePostCall(files, inputType, remove, move, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Organizes the provided documents by removing or moving specified pages.
     * This endpoint is used to organize the provided documents by removing or moving specified pages.  If the organization is started, the response will contain a success status and an optional message.  If the organization fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param remove The pages to remove from the document. (optional)
     * @param move The pages to move within the document. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiOrganizePost(List<File> files, String inputType, String remove, String move) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiOrganizePostWithHttpInfo(files, inputType, remove, move);
        return resp.getData();
    }

    /**
     * Organizes the provided documents by removing or moving specified pages.
     * This endpoint is used to organize the provided documents by removing or moving specified pages.  If the organization is started, the response will contain a success status and an optional message.  If the organization fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param remove The pages to remove from the document. (optional)
     * @param move The pages to move within the document. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiOrganizePostWithHttpInfo(List<File> files, String inputType, String remove, String move) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiOrganizePostValidateBeforeCall(files, inputType, remove, move, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Organizes the provided documents by removing or moving specified pages. (asynchronously)
     * This endpoint is used to organize the provided documents by removing or moving specified pages.  If the organization is started, the response will contain a success status and an optional message.  If the organization fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param remove The pages to remove from the document. (optional)
     * @param move The pages to move within the document. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiOrganizePostAsync(List<File> files, String inputType, String remove, String move, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiOrganizePostValidateBeforeCall(files, inputType, remove, move, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiParsePost
     * @param files  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiParsePostCall(List<File> files, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/parse";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiParsePostValidateBeforeCall(List<File> files, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiParsePostCall(files, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Parses the provided files using a parser service.
     * This endpoint is used to send files to a parser service for processing.  If the parsing is started, the response will contain a success status and an optional message.  If the parsing fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiParsePost(List<File> files) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiParsePostWithHttpInfo(files);
        return resp.getData();
    }

    /**
     * Parses the provided files using a parser service.
     * This endpoint is used to send files to a parser service for processing.  If the parsing is started, the response will contain a success status and an optional message.  If the parsing fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiParsePostWithHttpInfo(List<File> files) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiParsePostValidateBeforeCall(files, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Parses the provided files using a parser service. (asynchronously)
     * This endpoint is used to send files to a parser service for processing.  If the parsing is started, the response will contain a success status and an optional message.  If the parsing fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiParsePostAsync(List<File> files, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiParsePostValidateBeforeCall(files, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiRedactPost
     * @param files  (optional)
     * @param searchQuery The text to search for and redact. (optional)
     * @param replaceText The text to replace the found text with. (optional)
     * @param caseSensitive Indicates whether the search should be case-sensitive. (optional)
     * @param text Indicates whether text should be redacted. (optional)
     * @param comments Indicates whether comments should be redacted. (optional)
     * @param metadata Indicates whether metadata should be redacted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiRedactPostCall(List<File> files, String searchQuery, String replaceText, Boolean caseSensitive, Boolean text, Boolean comments, Boolean metadata, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/redact";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (searchQuery != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchQuery", searchQuery));
        if (replaceText != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("replaceText", replaceText));
        if (caseSensitive != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("caseSensitive", caseSensitive));
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("text", text));
        if (comments != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("comments", comments));
        if (metadata != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("metadata", metadata));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiRedactPostValidateBeforeCall(List<File> files, String searchQuery, String replaceText, Boolean caseSensitive, Boolean text, Boolean comments, Boolean metadata, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiRedactPostCall(files, searchQuery, replaceText, caseSensitive, text, comments, metadata, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Redacts specified text from the provided documents, with options to search case-sensitively, target in text, comments, and metadata.
     * This endpoint is used to redact specified text from the provided files, with options to search case-sensitively and target different parts of the document such as text, comments, and metadata.  If the redaction is started, the response will contain a success status and an optional message.  If the redaction fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param searchQuery The text to search for and redact. (optional)
     * @param replaceText The text to replace the found text with. (optional)
     * @param caseSensitive Indicates whether the search should be case-sensitive. (optional)
     * @param text Indicates whether text should be redacted. (optional)
     * @param comments Indicates whether comments should be redacted. (optional)
     * @param metadata Indicates whether metadata should be redacted. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiRedactPost(List<File> files, String searchQuery, String replaceText, Boolean caseSensitive, Boolean text, Boolean comments, Boolean metadata) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiRedactPostWithHttpInfo(files, searchQuery, replaceText, caseSensitive, text, comments, metadata);
        return resp.getData();
    }

    /**
     * Redacts specified text from the provided documents, with options to search case-sensitively, target in text, comments, and metadata.
     * This endpoint is used to redact specified text from the provided files, with options to search case-sensitively and target different parts of the document such as text, comments, and metadata.  If the redaction is started, the response will contain a success status and an optional message.  If the redaction fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param searchQuery The text to search for and redact. (optional)
     * @param replaceText The text to replace the found text with. (optional)
     * @param caseSensitive Indicates whether the search should be case-sensitive. (optional)
     * @param text Indicates whether text should be redacted. (optional)
     * @param comments Indicates whether comments should be redacted. (optional)
     * @param metadata Indicates whether metadata should be redacted. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiRedactPostWithHttpInfo(List<File> files, String searchQuery, String replaceText, Boolean caseSensitive, Boolean text, Boolean comments, Boolean metadata) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiRedactPostValidateBeforeCall(files, searchQuery, replaceText, caseSensitive, text, comments, metadata, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Redacts specified text from the provided documents, with options to search case-sensitively, target in text, comments, and metadata. (asynchronously)
     * This endpoint is used to redact specified text from the provided files, with options to search case-sensitively and target different parts of the document such as text, comments, and metadata.  If the redaction is started, the response will contain a success status and an optional message.  If the redaction fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param searchQuery The text to search for and redact. (optional)
     * @param replaceText The text to replace the found text with. (optional)
     * @param caseSensitive Indicates whether the search should be case-sensitive. (optional)
     * @param text Indicates whether text should be redacted. (optional)
     * @param comments Indicates whether comments should be redacted. (optional)
     * @param metadata Indicates whether metadata should be redacted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiRedactPostAsync(List<File> files, String searchQuery, String replaceText, Boolean caseSensitive, Boolean text, Boolean comments, Boolean metadata, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiRedactPostValidateBeforeCall(files, searchQuery, replaceText, caseSensitive, text, comments, metadata, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiRemoveIdPost
     * @param id The ID of the processing to remove. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiRemoveIdPostCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/remove/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiRemoveIdPostValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling pdfWebapiRemoveIdPost(Async)");
        }
        
        com.squareup.okhttp.Call call = pdfWebapiRemoveIdPostCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Removes all files from processing.
     * 
     * @param id The ID of the processing to remove. (required)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiRemoveIdPost(String id) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiRemoveIdPostWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Removes all files from processing.
     * 
     * @param id The ID of the processing to remove. (required)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiRemoveIdPostWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiRemoveIdPostValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Removes all files from processing. (asynchronously)
     * 
     * @param id The ID of the processing to remove. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiRemoveIdPostAsync(String id, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiRemoveIdPostValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiRemovePost
     * @param files  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiRemovePostCall(List<File> files, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiRemovePostValidateBeforeCall(List<File> files, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiRemovePostCall(files, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Removes annotations from the provided documents.
     * This endpoint is used to remove annotations from the provided files.  If the removal is started, the response will contain a success status and an optional message.  If the removal fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiRemovePost(List<File> files) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiRemovePostWithHttpInfo(files);
        return resp.getData();
    }

    /**
     * Removes annotations from the provided documents.
     * This endpoint is used to remove annotations from the provided files.  If the removal is started, the response will contain a success status and an optional message.  If the removal fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiRemovePostWithHttpInfo(List<File> files) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiRemovePostValidateBeforeCall(files, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Removes annotations from the provided documents. (asynchronously)
     * This endpoint is used to remove annotations from the provided files.  If the removal is started, the response will contain a success status and an optional message.  If the removal fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiRemovePostAsync(List<File> files, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiRemovePostValidateBeforeCall(files, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiRemoveWatermarkPost
     * @param watermarkText  (optional)
     * @param top  (optional)
     * @param left  (optional)
     * @param bottom  (optional)
     * @param right  (optional)
     * @param files  (optional)
     * @param isAllPages Indicates whether the watermark should be removed from all pages. (optional)
     * @param watermarkType The type of watermark to remove. (optional)
     * @param removeRange The range of pages to remove the watermark from. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiRemoveWatermarkPostCall(String watermarkText, Integer top, Integer left, Integer bottom, Integer right, List<File> files, Boolean isAllPages, String watermarkType, String removeRange, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/remove-watermark";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (isAllPages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isAllPages", isAllPages));
        if (watermarkType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("watermarkType", watermarkType));
        if (removeRange != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("removeRange", removeRange));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (watermarkText != null)
        localVarFormParams.put("watermarkText", watermarkText);
        if (top != null)
        localVarFormParams.put("top", top);
        if (left != null)
        localVarFormParams.put("left", left);
        if (bottom != null)
        localVarFormParams.put("bottom", bottom);
        if (right != null)
        localVarFormParams.put("right", right);
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiRemoveWatermarkPostValidateBeforeCall(String watermarkText, Integer top, Integer left, Integer bottom, Integer right, List<File> files, Boolean isAllPages, String watermarkType, String removeRange, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiRemoveWatermarkPostCall(watermarkText, top, left, bottom, right, files, isAllPages, watermarkType, removeRange, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Removes a watermark from the provided files.
     * This endpoint is used to remove a watermark from the provided files.  If the removal is started, the response will contain a success status and an optional message.  If the removal fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param watermarkText  (optional)
     * @param top  (optional)
     * @param left  (optional)
     * @param bottom  (optional)
     * @param right  (optional)
     * @param files  (optional)
     * @param isAllPages Indicates whether the watermark should be removed from all pages. (optional)
     * @param watermarkType The type of watermark to remove. (optional)
     * @param removeRange The range of pages to remove the watermark from. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiRemoveWatermarkPost(String watermarkText, Integer top, Integer left, Integer bottom, Integer right, List<File> files, Boolean isAllPages, String watermarkType, String removeRange) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiRemoveWatermarkPostWithHttpInfo(watermarkText, top, left, bottom, right, files, isAllPages, watermarkType, removeRange);
        return resp.getData();
    }

    /**
     * Removes a watermark from the provided files.
     * This endpoint is used to remove a watermark from the provided files.  If the removal is started, the response will contain a success status and an optional message.  If the removal fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param watermarkText  (optional)
     * @param top  (optional)
     * @param left  (optional)
     * @param bottom  (optional)
     * @param right  (optional)
     * @param files  (optional)
     * @param isAllPages Indicates whether the watermark should be removed from all pages. (optional)
     * @param watermarkType The type of watermark to remove. (optional)
     * @param removeRange The range of pages to remove the watermark from. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiRemoveWatermarkPostWithHttpInfo(String watermarkText, Integer top, Integer left, Integer bottom, Integer right, List<File> files, Boolean isAllPages, String watermarkType, String removeRange) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiRemoveWatermarkPostValidateBeforeCall(watermarkText, top, left, bottom, right, files, isAllPages, watermarkType, removeRange, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Removes a watermark from the provided files. (asynchronously)
     * This endpoint is used to remove a watermark from the provided files.  If the removal is started, the response will contain a success status and an optional message.  If the removal fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param watermarkText  (optional)
     * @param top  (optional)
     * @param left  (optional)
     * @param bottom  (optional)
     * @param right  (optional)
     * @param files  (optional)
     * @param isAllPages Indicates whether the watermark should be removed from all pages. (optional)
     * @param watermarkType The type of watermark to remove. (optional)
     * @param removeRange The range of pages to remove the watermark from. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiRemoveWatermarkPostAsync(String watermarkText, Integer top, Integer left, Integer bottom, Integer right, List<File> files, Boolean isAllPages, String watermarkType, String removeRange, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiRemoveWatermarkPostValidateBeforeCall(watermarkText, top, left, bottom, right, files, isAllPages, watermarkType, removeRange, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiRemovepagesPost
     * @param files  (optional)
     * @param removeRange The range of pages to remove from the files. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiRemovepagesPostCall(List<File> files, String removeRange, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/removepages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (removeRange != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("removeRange", removeRange));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiRemovepagesPostValidateBeforeCall(List<File> files, String removeRange, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiRemovepagesPostCall(files, removeRange, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Removes specified pages from the provided files.
     * This endpoint is used to remove specified pages from the provided files.  If the removal is started, the response will contain a success status and an optional message.  If the removal fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param removeRange The range of pages to remove from the files. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiRemovepagesPost(List<File> files, String removeRange) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiRemovepagesPostWithHttpInfo(files, removeRange);
        return resp.getData();
    }

    /**
     * Removes specified pages from the provided files.
     * This endpoint is used to remove specified pages from the provided files.  If the removal is started, the response will contain a success status and an optional message.  If the removal fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param removeRange The range of pages to remove from the files. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiRemovepagesPostWithHttpInfo(List<File> files, String removeRange) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiRemovepagesPostValidateBeforeCall(files, removeRange, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Removes specified pages from the provided files. (asynchronously)
     * This endpoint is used to remove specified pages from the provided files.  If the removal is started, the response will contain a success status and an optional message.  If the removal fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param removeRange The range of pages to remove from the files. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiRemovepagesPostAsync(List<File> files, String removeRange, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiRemovepagesPostValidateBeforeCall(files, removeRange, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiRepairPost
     * @param files  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiRepairPostCall(List<File> files, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/repair";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiRepairPostValidateBeforeCall(List<File> files, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiRepairPostCall(files, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Repairs the provided files.
     * This endpoint is used to repair the provided files.  If the repair is started, the response will contain a success status and an optional message.  If the repair fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiRepairPost(List<File> files) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiRepairPostWithHttpInfo(files);
        return resp.getData();
    }

    /**
     * Repairs the provided files.
     * This endpoint is used to repair the provided files.  If the repair is started, the response will contain a success status and an optional message.  If the repair fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiRepairPostWithHttpInfo(List<File> files) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiRepairPostValidateBeforeCall(files, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Repairs the provided files. (asynchronously)
     * This endpoint is used to repair the provided files.  If the repair is started, the response will contain a success status and an optional message.  If the repair fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiRepairPostAsync(List<File> files, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiRepairPostValidateBeforeCall(files, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiResizePost
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param resizeType The type of resizing to apply. (optional)
     * @param presetType The type of preset size to use for resizing. (optional)
     * @param presetSize The preset size to use for resizing. (optional)
     * @param width The desired width of the resized files. (optional)
     * @param height The desired height of the resized files. (optional)
     * @param percentage The percentage to resize the files by. (optional)
     * @param useProportions Indicates whether to maintain the aspect ratio when resizing. (optional)
     * @param pageSize The page size to use for the resized files. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiResizePostCall(List<File> files, String inputType, String outputType, Integer resizeType, String presetType, String presetSize, Integer width, Integer height, Integer percentage, Boolean useProportions, String pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/resize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inputType", inputType));
        if (outputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outputType", outputType));
        if (resizeType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resizeType", resizeType));
        if (presetType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("presetType", presetType));
        if (presetSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("presetSize", presetSize));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (percentage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("percentage", percentage));
        if (useProportions != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("useProportions", useProportions));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiResizePostValidateBeforeCall(List<File> files, String inputType, String outputType, Integer resizeType, String presetType, String presetSize, Integer width, Integer height, Integer percentage, Boolean useProportions, String pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiResizePostCall(files, inputType, outputType, resizeType, presetType, presetSize, width, height, percentage, useProportions, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Resizes the provided files to the specified dimensions or using a preset size.
     * This endpoint is used to resize the provided files to the specified dimensions or using a preset size.  If the resizing is started, the response will contain a success status and an optional message.  If the resizing fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param resizeType The type of resizing to apply. (optional)
     * @param presetType The type of preset size to use for resizing. (optional)
     * @param presetSize The preset size to use for resizing. (optional)
     * @param width The desired width of the resized files. (optional)
     * @param height The desired height of the resized files. (optional)
     * @param percentage The percentage to resize the files by. (optional)
     * @param useProportions Indicates whether to maintain the aspect ratio when resizing. (optional)
     * @param pageSize The page size to use for the resized files. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiResizePost(List<File> files, String inputType, String outputType, Integer resizeType, String presetType, String presetSize, Integer width, Integer height, Integer percentage, Boolean useProportions, String pageSize) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiResizePostWithHttpInfo(files, inputType, outputType, resizeType, presetType, presetSize, width, height, percentage, useProportions, pageSize);
        return resp.getData();
    }

    /**
     * Resizes the provided files to the specified dimensions or using a preset size.
     * This endpoint is used to resize the provided files to the specified dimensions or using a preset size.  If the resizing is started, the response will contain a success status and an optional message.  If the resizing fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param resizeType The type of resizing to apply. (optional)
     * @param presetType The type of preset size to use for resizing. (optional)
     * @param presetSize The preset size to use for resizing. (optional)
     * @param width The desired width of the resized files. (optional)
     * @param height The desired height of the resized files. (optional)
     * @param percentage The percentage to resize the files by. (optional)
     * @param useProportions Indicates whether to maintain the aspect ratio when resizing. (optional)
     * @param pageSize The page size to use for the resized files. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiResizePostWithHttpInfo(List<File> files, String inputType, String outputType, Integer resizeType, String presetType, String presetSize, Integer width, Integer height, Integer percentage, Boolean useProportions, String pageSize) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiResizePostValidateBeforeCall(files, inputType, outputType, resizeType, presetType, presetSize, width, height, percentage, useProportions, pageSize, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Resizes the provided files to the specified dimensions or using a preset size. (asynchronously)
     * This endpoint is used to resize the provided files to the specified dimensions or using a preset size.  If the resizing is started, the response will contain a success status and an optional message.  If the resizing fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param resizeType The type of resizing to apply. (optional)
     * @param presetType The type of preset size to use for resizing. (optional)
     * @param presetSize The preset size to use for resizing. (optional)
     * @param width The desired width of the resized files. (optional)
     * @param height The desired height of the resized files. (optional)
     * @param percentage The percentage to resize the files by. (optional)
     * @param useProportions Indicates whether to maintain the aspect ratio when resizing. (optional)
     * @param pageSize The page size to use for the resized files. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiResizePostAsync(List<File> files, String inputType, String outputType, Integer resizeType, String presetType, String presetSize, Integer width, Integer height, Integer percentage, Boolean useProportions, String pageSize, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiResizePostValidateBeforeCall(files, inputType, outputType, resizeType, presetType, presetSize, width, height, percentage, useProportions, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiRotatePost
     * @param files  (optional)
     * @param angle The angle by which to rotate the files. (optional)
     * @param rotateType The type of rotation to perform. (optional)
     * @param pageNum The page number to rotate, if applicable. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiRotatePostCall(List<File> files, Integer angle, String rotateType, String pageNum, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/rotate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (angle != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("angle", angle));
        if (rotateType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rotateType", rotateType));
        if (pageNum != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNum", pageNum));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiRotatePostValidateBeforeCall(List<File> files, Integer angle, String rotateType, String pageNum, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiRotatePostCall(files, angle, rotateType, pageNum, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Rotates the provided files by a specified angle, with options for rotation type and page number.
     * This endpoint is used to rotate the provided files by a specified angle.  If the rotation is started, the response will contain a success status and an optional message.  If the rotation fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param angle The angle by which to rotate the files. (optional)
     * @param rotateType The type of rotation to perform. (optional)
     * @param pageNum The page number to rotate, if applicable. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiRotatePost(List<File> files, Integer angle, String rotateType, String pageNum) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiRotatePostWithHttpInfo(files, angle, rotateType, pageNum);
        return resp.getData();
    }

    /**
     * Rotates the provided files by a specified angle, with options for rotation type and page number.
     * This endpoint is used to rotate the provided files by a specified angle.  If the rotation is started, the response will contain a success status and an optional message.  If the rotation fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param angle The angle by which to rotate the files. (optional)
     * @param rotateType The type of rotation to perform. (optional)
     * @param pageNum The page number to rotate, if applicable. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiRotatePostWithHttpInfo(List<File> files, Integer angle, String rotateType, String pageNum) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiRotatePostValidateBeforeCall(files, angle, rotateType, pageNum, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Rotates the provided files by a specified angle, with options for rotation type and page number. (asynchronously)
     * This endpoint is used to rotate the provided files by a specified angle.  If the rotation is started, the response will contain a success status and an optional message.  If the rotation fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param angle The angle by which to rotate the files. (optional)
     * @param rotateType The type of rotation to perform. (optional)
     * @param pageNum The page number to rotate, if applicable. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiRotatePostAsync(List<File> files, Integer angle, String rotateType, String pageNum, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiRotatePostValidateBeforeCall(files, angle, rotateType, pageNum, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiSearchPost
     * @param files  (optional)
     * @param query The text to search for within the files. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiSearchPostCall(List<File> files, String query, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query", query));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiSearchPostValidateBeforeCall(List<File> files, String query, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiSearchPostCall(files, query, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Searches the provided files for the specified query and makr found text with yellow background.
     * This endpoint is used to search the provided files for the specified query.  If the search is started, the response will contain a success status and an optional message.  If the search fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param query The text to search for within the files. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiSearchPost(List<File> files, String query) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiSearchPostWithHttpInfo(files, query);
        return resp.getData();
    }

    /**
     * Searches the provided files for the specified query and makr found text with yellow background.
     * This endpoint is used to search the provided files for the specified query.  If the search is started, the response will contain a success status and an optional message.  If the search fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param query The text to search for within the files. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiSearchPostWithHttpInfo(List<File> files, String query) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiSearchPostValidateBeforeCall(files, query, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Searches the provided files for the specified query and makr found text with yellow background. (asynchronously)
     * This endpoint is used to search the provided files for the specified query.  If the search is started, the response will contain a success status and an optional message.  If the search fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param query The text to search for within the files. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiSearchPostAsync(List<File> files, String query, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiSearchPostValidateBeforeCall(files, query, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiSearchablePost
     * @param files  (optional)
     * @param lang The language of the files to be converted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiSearchablePostCall(List<File> files, String lang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/searchable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (lang != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lang", lang));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiSearchablePostValidateBeforeCall(List<File> files, String lang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiSearchablePostCall(files, lang, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Converts the provided files into a searchable PDF format for the specified language.
     * This endpoint is used to convert the provided files into a searchable PDF format for the specified language.  If the conversion is started, the response will contain a success status and an optional message.  If the conversion fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param lang The language of the files to be converted. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiSearchablePost(List<File> files, String lang) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiSearchablePostWithHttpInfo(files, lang);
        return resp.getData();
    }

    /**
     * Converts the provided files into a searchable PDF format for the specified language.
     * This endpoint is used to convert the provided files into a searchable PDF format for the specified language.  If the conversion is started, the response will contain a success status and an optional message.  If the conversion fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param lang The language of the files to be converted. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiSearchablePostWithHttpInfo(List<File> files, String lang) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiSearchablePostValidateBeforeCall(files, lang, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts the provided files into a searchable PDF format for the specified language. (asynchronously)
     * This endpoint is used to convert the provided files into a searchable PDF format for the specified language.  If the conversion is started, the response will contain a success status and an optional message.  If the conversion fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param lang The language of the files to be converted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiSearchablePostAsync(List<File> files, String lang, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiSearchablePostValidateBeforeCall(files, lang, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiSignaturePost
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param signatureType The type of signature to add. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiSignaturePostCall(List<File> files, String inputType, String outputType, String signatureType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/Signature";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inputType", inputType));
        if (outputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outputType", outputType));
        if (signatureType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signatureType", signatureType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiSignaturePostValidateBeforeCall(List<File> files, String inputType, String outputType, String signatureType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiSignaturePostCall(files, inputType, outputType, signatureType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Adds a signature to the provided files.
     * This endpoint is used to add a signature to the provided files.  If the addition is started, the response will contain a success status and an optional message.  If the addition fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param signatureType The type of signature to add. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiSignaturePost(List<File> files, String inputType, String outputType, String signatureType) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiSignaturePostWithHttpInfo(files, inputType, outputType, signatureType);
        return resp.getData();
    }

    /**
     * Adds a signature to the provided files.
     * This endpoint is used to add a signature to the provided files.  If the addition is started, the response will contain a success status and an optional message.  If the addition fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param signatureType The type of signature to add. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiSignaturePostWithHttpInfo(List<File> files, String inputType, String outputType, String signatureType) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiSignaturePostValidateBeforeCall(files, inputType, outputType, signatureType, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds a signature to the provided files. (asynchronously)
     * This endpoint is used to add a signature to the provided files.  If the addition is started, the response will contain a success status and an optional message.  If the addition fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param signatureType The type of signature to add. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiSignaturePostAsync(List<File> files, String inputType, String outputType, String signatureType, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiSignaturePostValidateBeforeCall(files, inputType, outputType, signatureType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiSplitdocPost
     * @param files  (optional)
     * @param splitType The type of splitting to be performed. (optional)
     * @param pars Optional page rage for the splitting operation. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiSplitdocPostCall(List<File> files, Integer splitType, String pars, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/splitdoc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (splitType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("splitType", splitType));
        if (pars != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pars", pars));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiSplitdocPostValidateBeforeCall(List<File> files, Integer splitType, String pars, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiSplitdocPostCall(files, splitType, pars, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Splits the provided documents based on the specified split type and page rage to spit.
     * This endpoint is used to split documents based on the specified split type and page rage.  If the splitting is started, the response will contain a success status and an optional message.  If the splitting fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param splitType The type of splitting to be performed. (optional)
     * @param pars Optional page rage for the splitting operation. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiSplitdocPost(List<File> files, Integer splitType, String pars) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiSplitdocPostWithHttpInfo(files, splitType, pars);
        return resp.getData();
    }

    /**
     * Splits the provided documents based on the specified split type and page rage to spit.
     * This endpoint is used to split documents based on the specified split type and page rage.  If the splitting is started, the response will contain a success status and an optional message.  If the splitting fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param splitType The type of splitting to be performed. (optional)
     * @param pars Optional page rage for the splitting operation. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiSplitdocPostWithHttpInfo(List<File> files, Integer splitType, String pars) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiSplitdocPostValidateBeforeCall(files, splitType, pars, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Splits the provided documents based on the specified split type and page rage to spit. (asynchronously)
     * This endpoint is used to split documents based on the specified split type and page rage.  If the splitting is started, the response will contain a success status and an optional message.  If the splitting fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param splitType The type of splitting to be performed. (optional)
     * @param pars Optional page rage for the splitting operation. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiSplitdocPostAsync(List<File> files, Integer splitType, String pars, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiSplitdocPostValidateBeforeCall(files, splitType, pars, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiSplitimagePost
     * @param files  (optional)
     * @param splitType The type of splitting to be performed. (optional)
     * @param vertical The number of vertical splits to create. (optional)
     * @param horizontal The number of horizontal splits to create. (optional)
     * @param outputType The desired output format for the split images. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiSplitimagePostCall(List<File> files, Integer splitType, Integer vertical, Integer horizontal, String outputType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/splitimage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (splitType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("splitType", splitType));
        if (vertical != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vertical", vertical));
        if (horizontal != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("horizontal", horizontal));
        if (outputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outputType", outputType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiSplitimagePostValidateBeforeCall(List<File> files, Integer splitType, Integer vertical, Integer horizontal, String outputType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiSplitimagePostCall(files, splitType, vertical, horizontal, outputType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Splits the provided images into smaller parts based on the specified parameters.
     * This endpoint is used to split images into smaller parts based on the specified parameters.  If the splitting is started, the response will contain a success status and an optional message.  If the splitting fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param splitType The type of splitting to be performed. (optional)
     * @param vertical The number of vertical splits to create. (optional)
     * @param horizontal The number of horizontal splits to create. (optional)
     * @param outputType The desired output format for the split images. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiSplitimagePost(List<File> files, Integer splitType, Integer vertical, Integer horizontal, String outputType) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiSplitimagePostWithHttpInfo(files, splitType, vertical, horizontal, outputType);
        return resp.getData();
    }

    /**
     * Splits the provided images into smaller parts based on the specified parameters.
     * This endpoint is used to split images into smaller parts based on the specified parameters.  If the splitting is started, the response will contain a success status and an optional message.  If the splitting fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param splitType The type of splitting to be performed. (optional)
     * @param vertical The number of vertical splits to create. (optional)
     * @param horizontal The number of horizontal splits to create. (optional)
     * @param outputType The desired output format for the split images. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiSplitimagePostWithHttpInfo(List<File> files, Integer splitType, Integer vertical, Integer horizontal, String outputType) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiSplitimagePostValidateBeforeCall(files, splitType, vertical, horizontal, outputType, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Splits the provided images into smaller parts based on the specified parameters. (asynchronously)
     * This endpoint is used to split images into smaller parts based on the specified parameters.  If the splitting is started, the response will contain a success status and an optional message.  If the splitting fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param splitType The type of splitting to be performed. (optional)
     * @param vertical The number of vertical splits to create. (optional)
     * @param horizontal The number of horizontal splits to create. (optional)
     * @param outputType The desired output format for the split images. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiSplitimagePostAsync(List<File> files, Integer splitType, Integer vertical, Integer horizontal, String outputType, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiSplitimagePostValidateBeforeCall(files, splitType, vertical, horizontal, outputType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiStatusIdPost
     * @param id The ID of the processing to check the status of. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiStatusIdPostCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/status/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiStatusIdPostValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling pdfWebapiStatusIdPost(Async)");
        }
        
        com.squareup.okhttp.Call call = pdfWebapiStatusIdPostCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves the status of a processing.
     * 
     * @param id The ID of the processing to check the status of. (required)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiStatusIdPost(String id) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiStatusIdPostWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Retrieves the status of a processing.
     * 
     * @param id The ID of the processing to check the status of. (required)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiStatusIdPostWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiStatusIdPostValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the status of a processing. (asynchronously)
     * 
     * @param id The ID of the processing to check the status of. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiStatusIdPostAsync(String id, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiStatusIdPostValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiUnlockPost
     * @param files  (optional)
     * @param passw The password used in locked document. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiUnlockPostCall(List<File> files, String passw, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/unlock";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (passw != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("passw", passw));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiUnlockPostValidateBeforeCall(List<File> files, String passw, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiUnlockPostCall(files, passw, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Attempts to unlock a document with an password and associated files.
     * This endpoint is used to unlock a resource that was previously locked with a password on associated files.  If the unlock is started, the response will contain a success status and an optional message.  If the unlock fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param passw The password used in locked document. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiUnlockPost(List<File> files, String passw) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiUnlockPostWithHttpInfo(files, passw);
        return resp.getData();
    }

    /**
     * Attempts to unlock a document with an password and associated files.
     * This endpoint is used to unlock a resource that was previously locked with a password on associated files.  If the unlock is started, the response will contain a success status and an optional message.  If the unlock fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param passw The password used in locked document. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiUnlockPostWithHttpInfo(List<File> files, String passw) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiUnlockPostValidateBeforeCall(files, passw, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Attempts to unlock a document with an password and associated files. (asynchronously)
     * This endpoint is used to unlock a resource that was previously locked with a password on associated files.  If the unlock is started, the response will contain a success status and an optional message.  If the unlock fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param passw The password used in locked document. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiUnlockPostAsync(List<File> files, String passw, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiUnlockPostValidateBeforeCall(files, passw, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiVerifyEsignPost
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiVerifyEsignPostCall(List<File> files, String inputType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/verify_esign";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inputType", inputType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiVerifyEsignPostValidateBeforeCall(List<File> files, String inputType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiVerifyEsignPostCall(files, inputType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Verifies the electronic signature of the provided files.
     * This endpoint is used to verify the electronic signature of the provided files.  If the verification is started, the response will contain a success status and an optional message.  If the verification fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiVerifyEsignPost(List<File> files, String inputType) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiVerifyEsignPostWithHttpInfo(files, inputType);
        return resp.getData();
    }

    /**
     * Verifies the electronic signature of the provided files.
     * This endpoint is used to verify the electronic signature of the provided files.  If the verification is started, the response will contain a success status and an optional message.  If the verification fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiVerifyEsignPostWithHttpInfo(List<File> files, String inputType) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiVerifyEsignPostValidateBeforeCall(files, inputType, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Verifies the electronic signature of the provided files. (asynchronously)
     * This endpoint is used to verify the electronic signature of the provided files.  If the verification is started, the response will contain a success status and an optional message.  If the verification fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiVerifyEsignPostAsync(List<File> files, String inputType, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiVerifyEsignPostValidateBeforeCall(files, inputType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiWatermarkPost
     * @param isText  (optional)
     * @param text  (optional)
     * @param name2  (optional)
     * @param size  (optional)
     * @param bold  (optional)
     * @param italic  (optional)
     * @param underlined  (optional)
     * @param color  (optional)
     * @param contentType  (optional)
     * @param contentDisposition  (optional)
     * @param headers  (optional)
     * @param length  (optional)
     * @param name  (optional)
     * @param fileName  (optional)
     * @param isBackground  (optional)
     * @param rotation  (optional)
     * @param transparency  (optional)
     * @param layer  (optional)
     * @param pageFrom  (optional)
     * @param pageTo  (optional)
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiWatermarkPostCall(Boolean isText, String text, String name2, Integer size, Boolean bold, Boolean italic, Boolean underlined, String color, String contentType, String contentDisposition, Map<String, List<String>> headers, Long length, String name, String fileName, Boolean isBackground, Integer rotation, Float transparency, Boolean layer, Integer pageFrom, Integer pageTo, List<File> files, String inputType, String outputType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/watermark";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inputType", inputType));
        if (outputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outputType", outputType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (isText != null)
        localVarFormParams.put("isText", isText);
        if (text != null)
        localVarFormParams.put("text", text);
        if (name != null)
        localVarFormParams.put("name", name);
        if (size != null)
        localVarFormParams.put("size", size);
        if (bold != null)
        localVarFormParams.put("bold", bold);
        if (italic != null)
        localVarFormParams.put("italic", italic);
        if (underlined != null)
        localVarFormParams.put("underlined", underlined);
        if (color != null)
        localVarFormParams.put("color", color);
        if (contentType != null)
        localVarFormParams.put("ContentType", contentType);
        if (contentDisposition != null)
        localVarFormParams.put("ContentDisposition", contentDisposition);
        if (headers != null)
        localVarFormParams.put("Headers", headers);
        if (length != null)
        localVarFormParams.put("Length", length);
        if (name != null)
        localVarFormParams.put("Name", name);
        if (fileName != null)
        localVarFormParams.put("FileName", fileName);
        if (isBackground != null)
        localVarFormParams.put("isBackground", isBackground);
        if (rotation != null)
        localVarFormParams.put("rotation", rotation);
        if (transparency != null)
        localVarFormParams.put("transparency", transparency);
        if (layer != null)
        localVarFormParams.put("layer", layer);
        if (pageFrom != null)
        localVarFormParams.put("pageFrom", pageFrom);
        if (pageTo != null)
        localVarFormParams.put("pageTo", pageTo);
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiWatermarkPostValidateBeforeCall(Boolean isText, String text, String name2, Integer size, Boolean bold, Boolean italic, Boolean underlined, String color, String contentType, String contentDisposition, Map<String, List<String>> headers, Long length, String name, String fileName, Boolean isBackground, Integer rotation, Float transparency, Boolean layer, Integer pageFrom, Integer pageTo, List<File> files, String inputType, String outputType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiWatermarkPostCall(isText, text, name2, size, bold, italic, underlined, color, contentType, contentDisposition, headers, length, name, fileName, isBackground, rotation, transparency, layer, pageFrom, pageTo, files, inputType, outputType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Adds a watermark to the provided files.
     * This endpoint is used to add a watermark to the provided files.  If the addition is started, the response will contain a success status and an optional message.  If the addition fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param isText  (optional)
     * @param text  (optional)
     * @param name2  (optional)
     * @param size  (optional)
     * @param bold  (optional)
     * @param italic  (optional)
     * @param underlined  (optional)
     * @param color  (optional)
     * @param contentType  (optional)
     * @param contentDisposition  (optional)
     * @param headers  (optional)
     * @param length  (optional)
     * @param name  (optional)
     * @param fileName  (optional)
     * @param isBackground  (optional)
     * @param rotation  (optional)
     * @param transparency  (optional)
     * @param layer  (optional)
     * @param pageFrom  (optional)
     * @param pageTo  (optional)
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiWatermarkPost(Boolean isText, String text, String name2, Integer size, Boolean bold, Boolean italic, Boolean underlined, String color, String contentType, String contentDisposition, Map<String, List<String>> headers, Long length, String name, String fileName, Boolean isBackground, Integer rotation, Float transparency, Boolean layer, Integer pageFrom, Integer pageTo, List<File> files, String inputType, String outputType) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiWatermarkPostWithHttpInfo(isText, text, name2, size, bold, italic, underlined, color, contentType, contentDisposition, headers, length, name, fileName, isBackground, rotation, transparency, layer, pageFrom, pageTo, files, inputType, outputType);
        return resp.getData();
    }

    /**
     * Adds a watermark to the provided files.
     * This endpoint is used to add a watermark to the provided files.  If the addition is started, the response will contain a success status and an optional message.  If the addition fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param isText  (optional)
     * @param text  (optional)
     * @param name2  (optional)
     * @param size  (optional)
     * @param bold  (optional)
     * @param italic  (optional)
     * @param underlined  (optional)
     * @param color  (optional)
     * @param contentType  (optional)
     * @param contentDisposition  (optional)
     * @param headers  (optional)
     * @param length  (optional)
     * @param name  (optional)
     * @param fileName  (optional)
     * @param isBackground  (optional)
     * @param rotation  (optional)
     * @param transparency  (optional)
     * @param layer  (optional)
     * @param pageFrom  (optional)
     * @param pageTo  (optional)
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiWatermarkPostWithHttpInfo(Boolean isText, String text, String name2, Integer size, Boolean bold, Boolean italic, Boolean underlined, String color, String contentType, String contentDisposition, Map<String, List<String>> headers, Long length, String name, String fileName, Boolean isBackground, Integer rotation, Float transparency, Boolean layer, Integer pageFrom, Integer pageTo, List<File> files, String inputType, String outputType) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiWatermarkPostValidateBeforeCall(isText, text, name2, size, bold, italic, underlined, color, contentType, contentDisposition, headers, length, name, fileName, isBackground, rotation, transparency, layer, pageFrom, pageTo, files, inputType, outputType, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds a watermark to the provided files. (asynchronously)
     * This endpoint is used to add a watermark to the provided files.  If the addition is started, the response will contain a success status and an optional message.  If the addition fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param isText  (optional)
     * @param text  (optional)
     * @param name2  (optional)
     * @param size  (optional)
     * @param bold  (optional)
     * @param italic  (optional)
     * @param underlined  (optional)
     * @param color  (optional)
     * @param contentType  (optional)
     * @param contentDisposition  (optional)
     * @param headers  (optional)
     * @param length  (optional)
     * @param name  (optional)
     * @param fileName  (optional)
     * @param isBackground  (optional)
     * @param rotation  (optional)
     * @param transparency  (optional)
     * @param layer  (optional)
     * @param pageFrom  (optional)
     * @param pageTo  (optional)
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiWatermarkPostAsync(Boolean isText, String text, String name2, Integer size, Boolean bold, Boolean italic, Boolean underlined, String color, String contentType, String contentDisposition, Map<String, List<String>> headers, Long length, String name, String fileName, Boolean isBackground, Integer rotation, Float transparency, Boolean layer, Integer pageFrom, Integer pageTo, List<File> files, String inputType, String outputType, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiWatermarkPostValidateBeforeCall(isText, text, name2, size, bold, italic, underlined, color, contentType, contentDisposition, headers, length, name, fileName, isBackground, rotation, transparency, layer, pageFrom, pageTo, files, inputType, outputType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiWordCounterPost
     * @param files  (optional)
     * @param pageRange The range of pages to count words in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiWordCounterPostCall(List<File> files, String pageRange, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/WordCounter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageRange != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageRange", pageRange));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiWordCounterPostValidateBeforeCall(List<File> files, String pageRange, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiWordCounterPostCall(files, pageRange, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Counts the words in the provided files within the specified page range.
     * This endpoint is used to count the words in the provided files within the specified page range.  If the counting is started, the response will contain a success status and the word count.  If the counting fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param pageRange The range of pages to count words in. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiWordCounterPost(List<File> files, String pageRange) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiWordCounterPostWithHttpInfo(files, pageRange);
        return resp.getData();
    }

    /**
     * Counts the words in the provided files within the specified page range.
     * This endpoint is used to count the words in the provided files within the specified page range.  If the counting is started, the response will contain a success status and the word count.  If the counting fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param pageRange The range of pages to count words in. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiWordCounterPostWithHttpInfo(List<File> files, String pageRange) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiWordCounterPostValidateBeforeCall(files, pageRange, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Counts the words in the provided files within the specified page range. (asynchronously)
     * This endpoint is used to count the words in the provided files within the specified page range.  If the counting is started, the response will contain a success status and the word count.  If the counting fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param pageRange The range of pages to count words in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiWordCounterPostAsync(List<File> files, String pageRange, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiWordCounterPostValidateBeforeCall(files, pageRange, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiXfaconvertPost
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiXfaconvertPostCall(List<File> files, String inputType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/xfaconvert";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inputType", inputType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiXfaconvertPostValidateBeforeCall(List<File> files, String inputType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiXfaconvertPostCall(files, inputType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Converts the provided documents from XFA format to a different format.
     * This endpoint is used to convert the provided files from XFA format to a different format.  If the conversion is started, the response will contain a success status and an optional message.  If the conversion fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiXfaconvertPost(List<File> files, String inputType) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiXfaconvertPostWithHttpInfo(files, inputType);
        return resp.getData();
    }

    /**
     * Converts the provided documents from XFA format to a different format.
     * This endpoint is used to convert the provided files from XFA format to a different format.  If the conversion is started, the response will contain a success status and an optional message.  If the conversion fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiXfaconvertPostWithHttpInfo(List<File> files, String inputType) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiXfaconvertPostValidateBeforeCall(files, inputType, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts the provided documents from XFA format to a different format. (asynchronously)
     * This endpoint is used to convert the provided files from XFA format to a different format.  If the conversion is started, the response will contain a success status and an optional message.  If the conversion fails, the response will contain an error status and a message indicating the reason for the failure.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiXfaconvertPostAsync(List<File> files, String inputType, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiXfaconvertPostValidateBeforeCall(files, inputType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
