<?php
/**
 * WebapiWatermarkBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Aspose.Pdf RestApi
 *
 * Demo 1
 *
 * OpenAPI spec version: v1
 * Contact: Evgeny.Pirogov@aspose.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * WebapiWatermarkBody Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WebapiWatermarkBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'webapi_watermark_body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_text' => 'bool',
        'text' => 'string',
        'name' => 'string',
        'size' => 'int',
        'bold' => 'bool',
        'italic' => 'bool',
        'underlined' => 'bool',
        'color' => 'string',
        'content_type' => 'string',
        'content_disposition' => 'string',
        'headers' => 'map[string,string[]]',
        'length' => 'int',
        'name' => 'string',
        'file_name' => 'string',
        'is_background' => 'bool',
        'rotation' => 'int',
        'transparency' => 'float',
        'layer' => 'bool',
        'page_from' => 'int',
        'page_to' => 'int',
        'files' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'is_text' => null,
        'text' => null,
        'name' => null,
        'size' => 'int32',
        'bold' => null,
        'italic' => null,
        'underlined' => null,
        'color' => null,
        'content_type' => null,
        'content_disposition' => null,
        'headers' => null,
        'length' => 'int64',
        'name' => null,
        'file_name' => null,
        'is_background' => null,
        'rotation' => 'int32',
        'transparency' => 'float',
        'layer' => null,
        'page_from' => 'int32',
        'page_to' => 'int32',
        'files' => 'binary'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_text' => 'isText',
        'text' => 'text',
        'name' => 'name',
        'size' => 'size',
        'bold' => 'bold',
        'italic' => 'italic',
        'underlined' => 'underlined',
        'color' => 'color',
        'content_type' => 'ContentType',
        'content_disposition' => 'ContentDisposition',
        'headers' => 'Headers',
        'length' => 'Length',
        'name' => 'Name',
        'file_name' => 'FileName',
        'is_background' => 'isBackground',
        'rotation' => 'rotation',
        'transparency' => 'transparency',
        'layer' => 'layer',
        'page_from' => 'pageFrom',
        'page_to' => 'pageTo',
        'files' => 'files'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_text' => 'setIsText',
        'text' => 'setText',
        'name' => 'setName',
        'size' => 'setSize',
        'bold' => 'setBold',
        'italic' => 'setItalic',
        'underlined' => 'setUnderlined',
        'color' => 'setColor',
        'content_type' => 'setContentType',
        'content_disposition' => 'setContentDisposition',
        'headers' => 'setHeaders',
        'length' => 'setLength',
        'name' => 'setName',
        'file_name' => 'setFileName',
        'is_background' => 'setIsBackground',
        'rotation' => 'setRotation',
        'transparency' => 'setTransparency',
        'layer' => 'setLayer',
        'page_from' => 'setPageFrom',
        'page_to' => 'setPageTo',
        'files' => 'setFiles'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_text' => 'getIsText',
        'text' => 'getText',
        'name' => 'getName',
        'size' => 'getSize',
        'bold' => 'getBold',
        'italic' => 'getItalic',
        'underlined' => 'getUnderlined',
        'color' => 'getColor',
        'content_type' => 'getContentType',
        'content_disposition' => 'getContentDisposition',
        'headers' => 'getHeaders',
        'length' => 'getLength',
        'name' => 'getName',
        'file_name' => 'getFileName',
        'is_background' => 'getIsBackground',
        'rotation' => 'getRotation',
        'transparency' => 'getTransparency',
        'layer' => 'getLayer',
        'page_from' => 'getPageFrom',
        'page_to' => 'getPageTo',
        'files' => 'getFiles'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_text'] = isset($data['is_text']) ? $data['is_text'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['bold'] = isset($data['bold']) ? $data['bold'] : null;
        $this->container['italic'] = isset($data['italic']) ? $data['italic'] : null;
        $this->container['underlined'] = isset($data['underlined']) ? $data['underlined'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['content_type'] = isset($data['content_type']) ? $data['content_type'] : null;
        $this->container['content_disposition'] = isset($data['content_disposition']) ? $data['content_disposition'] : null;
        $this->container['headers'] = isset($data['headers']) ? $data['headers'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['file_name'] = isset($data['file_name']) ? $data['file_name'] : null;
        $this->container['is_background'] = isset($data['is_background']) ? $data['is_background'] : null;
        $this->container['rotation'] = isset($data['rotation']) ? $data['rotation'] : null;
        $this->container['transparency'] = isset($data['transparency']) ? $data['transparency'] : null;
        $this->container['layer'] = isset($data['layer']) ? $data['layer'] : null;
        $this->container['page_from'] = isset($data['page_from']) ? $data['page_from'] : null;
        $this->container['page_to'] = isset($data['page_to']) ? $data['page_to'] : null;
        $this->container['files'] = isset($data['files']) ? $data['files'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_text
     *
     * @return bool
     */
    public function getIsText()
    {
        return $this->container['is_text'];
    }

    /**
     * Sets is_text
     *
     * @param bool $is_text is_text
     *
     * @return $this
     */
    public function setIsText($is_text)
    {
        $this->container['is_text'] = $is_text;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text text
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size size
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets bold
     *
     * @return bool
     */
    public function getBold()
    {
        return $this->container['bold'];
    }

    /**
     * Sets bold
     *
     * @param bool $bold bold
     *
     * @return $this
     */
    public function setBold($bold)
    {
        $this->container['bold'] = $bold;

        return $this;
    }

    /**
     * Gets italic
     *
     * @return bool
     */
    public function getItalic()
    {
        return $this->container['italic'];
    }

    /**
     * Sets italic
     *
     * @param bool $italic italic
     *
     * @return $this
     */
    public function setItalic($italic)
    {
        $this->container['italic'] = $italic;

        return $this;
    }

    /**
     * Gets underlined
     *
     * @return bool
     */
    public function getUnderlined()
    {
        return $this->container['underlined'];
    }

    /**
     * Sets underlined
     *
     * @param bool $underlined underlined
     *
     * @return $this
     */
    public function setUnderlined($underlined)
    {
        $this->container['underlined'] = $underlined;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string $color color
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets content_type
     *
     * @return string
     */
    public function getContentType()
    {
        return $this->container['content_type'];
    }

    /**
     * Sets content_type
     *
     * @param string $content_type content_type
     *
     * @return $this
     */
    public function setContentType($content_type)
    {
        $this->container['content_type'] = $content_type;

        return $this;
    }

    /**
     * Gets content_disposition
     *
     * @return string
     */
    public function getContentDisposition()
    {
        return $this->container['content_disposition'];
    }

    /**
     * Sets content_disposition
     *
     * @param string $content_disposition content_disposition
     *
     * @return $this
     */
    public function setContentDisposition($content_disposition)
    {
        $this->container['content_disposition'] = $content_disposition;

        return $this;
    }

    /**
     * Gets headers
     *
     * @return map[string,string[]]
     */
    public function getHeaders()
    {
        return $this->container['headers'];
    }

    /**
     * Sets headers
     *
     * @param map[string,string[]] $headers headers
     *
     * @return $this
     */
    public function setHeaders($headers)
    {
        $this->container['headers'] = $headers;

        return $this;
    }

    /**
     * Gets length
     *
     * @return int
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param int $length length
     *
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string $file_name file_name
     *
     * @return $this
     */
    public function setFileName($file_name)
    {
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets is_background
     *
     * @return bool
     */
    public function getIsBackground()
    {
        return $this->container['is_background'];
    }

    /**
     * Sets is_background
     *
     * @param bool $is_background is_background
     *
     * @return $this
     */
    public function setIsBackground($is_background)
    {
        $this->container['is_background'] = $is_background;

        return $this;
    }

    /**
     * Gets rotation
     *
     * @return int
     */
    public function getRotation()
    {
        return $this->container['rotation'];
    }

    /**
     * Sets rotation
     *
     * @param int $rotation rotation
     *
     * @return $this
     */
    public function setRotation($rotation)
    {
        $this->container['rotation'] = $rotation;

        return $this;
    }

    /**
     * Gets transparency
     *
     * @return float
     */
    public function getTransparency()
    {
        return $this->container['transparency'];
    }

    /**
     * Sets transparency
     *
     * @param float $transparency transparency
     *
     * @return $this
     */
    public function setTransparency($transparency)
    {
        $this->container['transparency'] = $transparency;

        return $this;
    }

    /**
     * Gets layer
     *
     * @return bool
     */
    public function getLayer()
    {
        return $this->container['layer'];
    }

    /**
     * Sets layer
     *
     * @param bool $layer layer
     *
     * @return $this
     */
    public function setLayer($layer)
    {
        $this->container['layer'] = $layer;

        return $this;
    }

    /**
     * Gets page_from
     *
     * @return int
     */
    public function getPageFrom()
    {
        return $this->container['page_from'];
    }

    /**
     * Sets page_from
     *
     * @param int $page_from page_from
     *
     * @return $this
     */
    public function setPageFrom($page_from)
    {
        $this->container['page_from'] = $page_from;

        return $this;
    }

    /**
     * Gets page_to
     *
     * @return int
     */
    public function getPageTo()
    {
        return $this->container['page_to'];
    }

    /**
     * Sets page_to
     *
     * @param int $page_to page_to
     *
     * @return $this
     */
    public function setPageTo($page_to)
    {
        $this->container['page_to'] = $page_to;

        return $this;
    }

    /**
     * Gets files
     *
     * @return string[]
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param string[] $files files
     *
     * @return $this
     */
    public function setFiles($files)
    {
        $this->container['files'] = $files;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
