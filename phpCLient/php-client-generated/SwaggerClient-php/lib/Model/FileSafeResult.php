<?php
/**
 * FileSafeResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Aspose.Pdf RestApi
 *
 * Demo 1
 *
 * OpenAPI spec version: v1
 * Contact: Evgeny.Pirogov@aspose.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FileSafeResult Class Doc Comment
 *
 * @category Class
 * @description File processing result.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FileSafeResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FileSafeResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_success' => 'bool',
        'id' => 'string',
        'file_name' => 'string',
        'upload_file_name' => 'string',
        'id_upload' => 'string',
        'file_length' => 'int',
        'built_prop' => '\Swagger\Client\Model\DocProperty[]',
        'custom_prop' => '\Swagger\Client\Model\DocProperty[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'is_success' => null,
        'id' => null,
        'file_name' => null,
        'upload_file_name' => null,
        'id_upload' => null,
        'file_length' => 'int64',
        'built_prop' => null,
        'custom_prop' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_success' => 'isSuccess',
        'id' => 'id',
        'file_name' => 'fileName',
        'upload_file_name' => 'uploadFileName',
        'id_upload' => 'idUpload',
        'file_length' => 'fileLength',
        'built_prop' => 'builtProp',
        'custom_prop' => 'customProp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_success' => 'setIsSuccess',
        'id' => 'setId',
        'file_name' => 'setFileName',
        'upload_file_name' => 'setUploadFileName',
        'id_upload' => 'setIdUpload',
        'file_length' => 'setFileLength',
        'built_prop' => 'setBuiltProp',
        'custom_prop' => 'setCustomProp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_success' => 'getIsSuccess',
        'id' => 'getId',
        'file_name' => 'getFileName',
        'upload_file_name' => 'getUploadFileName',
        'id_upload' => 'getIdUpload',
        'file_length' => 'getFileLength',
        'built_prop' => 'getBuiltProp',
        'custom_prop' => 'getCustomProp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_success'] = isset($data['is_success']) ? $data['is_success'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['file_name'] = isset($data['file_name']) ? $data['file_name'] : null;
        $this->container['upload_file_name'] = isset($data['upload_file_name']) ? $data['upload_file_name'] : null;
        $this->container['id_upload'] = isset($data['id_upload']) ? $data['id_upload'] : null;
        $this->container['file_length'] = isset($data['file_length']) ? $data['file_length'] : null;
        $this->container['built_prop'] = isset($data['built_prop']) ? $data['built_prop'] : null;
        $this->container['custom_prop'] = isset($data['custom_prop']) ? $data['custom_prop'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_success
     *
     * @return bool
     */
    public function getIsSuccess()
    {
        return $this->container['is_success'];
    }

    /**
     * Sets is_success
     *
     * @param bool $is_success Is result success?
     *
     * @return $this
     */
    public function setIsSuccess($is_success)
    {
        $this->container['is_success'] = $is_success;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Upload id.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string $file_name File name.
     *
     * @return $this
     */
    public function setFileName($file_name)
    {
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets upload_file_name
     *
     * @return string
     */
    public function getUploadFileName()
    {
        return $this->container['upload_file_name'];
    }

    /**
     * Sets upload_file_name
     *
     * @param string $upload_file_name Gets or sets the name of the upload file.
     *
     * @return $this
     */
    public function setUploadFileName($upload_file_name)
    {
        $this->container['upload_file_name'] = $upload_file_name;

        return $this;
    }

    /**
     * Gets id_upload
     *
     * @return string
     */
    public function getIdUpload()
    {
        return $this->container['id_upload'];
    }

    /**
     * Sets id_upload
     *
     * @param string $id_upload idUpload from request.
     *
     * @return $this
     */
    public function setIdUpload($id_upload)
    {
        $this->container['id_upload'] = $id_upload;

        return $this;
    }

    /**
     * Gets file_length
     *
     * @return int
     */
    public function getFileLength()
    {
        return $this->container['file_length'];
    }

    /**
     * Sets file_length
     *
     * @param int $file_length File length.
     *
     * @return $this
     */
    public function setFileLength($file_length)
    {
        $this->container['file_length'] = $file_length;

        return $this;
    }

    /**
     * Gets built_prop
     *
     * @return \Swagger\Client\Model\DocProperty[]
     */
    public function getBuiltProp()
    {
        return $this->container['built_prop'];
    }

    /**
     * Sets built_prop
     *
     * @param \Swagger\Client\Model\DocProperty[] $built_prop built_prop
     *
     * @return $this
     */
    public function setBuiltProp($built_prop)
    {
        $this->container['built_prop'] = $built_prop;

        return $this;
    }

    /**
     * Gets custom_prop
     *
     * @return \Swagger\Client\Model\DocProperty[]
     */
    public function getCustomProp()
    {
        return $this->container['custom_prop'];
    }

    /**
     * Sets custom_prop
     *
     * @param \Swagger\Client\Model\DocProperty[] $custom_prop custom_prop
     *
     * @return $this
     */
    public function setCustomProp($custom_prop)
    {
        $this->container['custom_prop'] = $custom_prop;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
