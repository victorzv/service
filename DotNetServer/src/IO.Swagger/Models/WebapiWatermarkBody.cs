/*
 * Aspose.Pdf RestApi
 *
 * Demo 1
 *
 * OpenAPI spec version: v1
 * Contact: Evgeny.Pirogov@aspose.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class WebapiWatermarkBody : IEquatable<WebapiWatermarkBody>
    { 
        /// <summary>
        /// Gets or Sets IsText
        /// </summary>

        [DataMember(Name="isText")]
        public bool? IsText { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>

        [DataMember(Name="text")]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>

 /*       [DataMember(Name="name")]
        public string Name { get; set; }
*/
        /// <summary>
        /// Gets or Sets Size
        /// </summary>

        [DataMember(Name="size")]
        public int? Size { get; set; }

        /// <summary>
        /// Gets or Sets Bold
        /// </summary>

        [DataMember(Name="bold")]
        public bool? Bold { get; set; }

        /// <summary>
        /// Gets or Sets Italic
        /// </summary>

        [DataMember(Name="italic")]
        public bool? Italic { get; set; }

        /// <summary>
        /// Gets or Sets Underlined
        /// </summary>

        [DataMember(Name="underlined")]
        public bool? Underlined { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>

        [DataMember(Name="color")]
        public string Color { get; set; }

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>

        [DataMember(Name="ContentType")]
        public string ContentType { get; set; }

        /// <summary>
        /// Gets or Sets ContentDisposition
        /// </summary>

        [DataMember(Name="ContentDisposition")]
        public string ContentDisposition { get; set; }

        /// <summary>
        /// Gets or Sets Headers
        /// </summary>

        [DataMember(Name="Headers")]
        public Dictionary<string, List<string>> Headers { get; set; }

        /// <summary>
        /// Gets or Sets Length
        /// </summary>

        [DataMember(Name="Length")]
        public long? Length { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>

        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>

        [DataMember(Name="FileName")]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or Sets IsBackground
        /// </summary>

        [DataMember(Name="isBackground")]
        public bool? IsBackground { get; set; }

        /// <summary>
        /// Gets or Sets Rotation
        /// </summary>

        [DataMember(Name="rotation")]
        public int? Rotation { get; set; }

        /// <summary>
        /// Gets or Sets Transparency
        /// </summary>

        [DataMember(Name="transparency")]
        public float? Transparency { get; set; }

        /// <summary>
        /// Gets or Sets Layer
        /// </summary>

        [DataMember(Name="layer")]
        public bool? Layer { get; set; }

        /// <summary>
        /// Gets or Sets PageFrom
        /// </summary>

        [DataMember(Name="pageFrom")]
        public int? PageFrom { get; set; }

        /// <summary>
        /// Gets or Sets PageTo
        /// </summary>

        [DataMember(Name="pageTo")]
        public int? PageTo { get; set; }

        /// <summary>
        /// Gets or Sets Files
        /// </summary>

        [DataMember(Name="files")]
        public List<byte[]> Files { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebapiWatermarkBody {\n");
            sb.Append("  IsText: ").Append(IsText).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Bold: ").Append(Bold).Append("\n");
            sb.Append("  Italic: ").Append(Italic).Append("\n");
            sb.Append("  Underlined: ").Append(Underlined).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  ContentDisposition: ").Append(ContentDisposition).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  IsBackground: ").Append(IsBackground).Append("\n");
            sb.Append("  Rotation: ").Append(Rotation).Append("\n");
            sb.Append("  Transparency: ").Append(Transparency).Append("\n");
            sb.Append("  Layer: ").Append(Layer).Append("\n");
            sb.Append("  PageFrom: ").Append(PageFrom).Append("\n");
            sb.Append("  PageTo: ").Append(PageTo).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((WebapiWatermarkBody)obj);
        }

        /// <summary>
        /// Returns true if WebapiWatermarkBody instances are equal
        /// </summary>
        /// <param name="other">Instance of WebapiWatermarkBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebapiWatermarkBody other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsText == other.IsText ||
                    IsText != null &&
                    IsText.Equals(other.IsText)
                ) && 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.Equals(other.Text)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Size == other.Size ||
                    Size != null &&
                    Size.Equals(other.Size)
                ) && 
                (
                    Bold == other.Bold ||
                    Bold != null &&
                    Bold.Equals(other.Bold)
                ) && 
                (
                    Italic == other.Italic ||
                    Italic != null &&
                    Italic.Equals(other.Italic)
                ) && 
                (
                    Underlined == other.Underlined ||
                    Underlined != null &&
                    Underlined.Equals(other.Underlined)
                ) && 
                (
                    Color == other.Color ||
                    Color != null &&
                    Color.Equals(other.Color)
                ) && 
                (
                    ContentType == other.ContentType ||
                    ContentType != null &&
                    ContentType.Equals(other.ContentType)
                ) && 
                (
                    ContentDisposition == other.ContentDisposition ||
                    ContentDisposition != null &&
                    ContentDisposition.Equals(other.ContentDisposition)
                ) && 
                (
                    Headers == other.Headers ||
                    Headers != null &&
                    Headers.SequenceEqual(other.Headers)
                ) && 
                (
                    Length == other.Length ||
                    Length != null &&
                    Length.Equals(other.Length)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    FileName == other.FileName ||
                    FileName != null &&
                    FileName.Equals(other.FileName)
                ) && 
                (
                    IsBackground == other.IsBackground ||
                    IsBackground != null &&
                    IsBackground.Equals(other.IsBackground)
                ) && 
                (
                    Rotation == other.Rotation ||
                    Rotation != null &&
                    Rotation.Equals(other.Rotation)
                ) && 
                (
                    Transparency == other.Transparency ||
                    Transparency != null &&
                    Transparency.Equals(other.Transparency)
                ) && 
                (
                    Layer == other.Layer ||
                    Layer != null &&
                    Layer.Equals(other.Layer)
                ) && 
                (
                    PageFrom == other.PageFrom ||
                    PageFrom != null &&
                    PageFrom.Equals(other.PageFrom)
                ) && 
                (
                    PageTo == other.PageTo ||
                    PageTo != null &&
                    PageTo.Equals(other.PageTo)
                ) && 
                (
                    Files == other.Files ||
                    Files != null &&
                    Files.SequenceEqual(other.Files)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IsText != null)
                    hashCode = hashCode * 59 + IsText.GetHashCode();
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Size != null)
                    hashCode = hashCode * 59 + Size.GetHashCode();
                    if (Bold != null)
                    hashCode = hashCode * 59 + Bold.GetHashCode();
                    if (Italic != null)
                    hashCode = hashCode * 59 + Italic.GetHashCode();
                    if (Underlined != null)
                    hashCode = hashCode * 59 + Underlined.GetHashCode();
                    if (Color != null)
                    hashCode = hashCode * 59 + Color.GetHashCode();
                    if (ContentType != null)
                    hashCode = hashCode * 59 + ContentType.GetHashCode();
                    if (ContentDisposition != null)
                    hashCode = hashCode * 59 + ContentDisposition.GetHashCode();
                    if (Headers != null)
                    hashCode = hashCode * 59 + Headers.GetHashCode();
                    if (Length != null)
                    hashCode = hashCode * 59 + Length.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (FileName != null)
                    hashCode = hashCode * 59 + FileName.GetHashCode();
                    if (IsBackground != null)
                    hashCode = hashCode * 59 + IsBackground.GetHashCode();
                    if (Rotation != null)
                    hashCode = hashCode * 59 + Rotation.GetHashCode();
                    if (Transparency != null)
                    hashCode = hashCode * 59 + Transparency.GetHashCode();
                    if (Layer != null)
                    hashCode = hashCode * 59 + Layer.GetHashCode();
                    if (PageFrom != null)
                    hashCode = hashCode * 59 + PageFrom.GetHashCode();
                    if (PageTo != null)
                    hashCode = hashCode * 59 + PageTo.GetHashCode();
                    if (Files != null)
                    hashCode = hashCode * 59 + Files.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(WebapiWatermarkBody left, WebapiWatermarkBody right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(WebapiWatermarkBody left, WebapiWatermarkBody right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
