/*
 * Aspose.Pdf RestApi
 *
 * Demo 1
 *
 * OpenAPI spec version: v1
 * Contact: Evgeny.Pirogov@aspose.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// File processing result.
    /// </summary>
    [DataContract]
    public partial class FileSafeResult : IEquatable<FileSafeResult>
    { 
        /// <summary>
        /// Is result success?
        /// </summary>
        /// <value>Is result success?</value>

        [DataMember(Name="isSuccess")]
        public bool? IsSuccess { get; set; }

        /// <summary>
        /// Upload id.
        /// </summary>
        /// <value>Upload id.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// File name.
        /// </summary>
        /// <value>File name.</value>

        [DataMember(Name="fileName")]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or sets the name of the upload file.
        /// </summary>
        /// <value>Gets or sets the name of the upload file.</value>

        [DataMember(Name="uploadFileName")]
        public string UploadFileName { get; set; }

        /// <summary>
        /// idUpload from request.
        /// </summary>
        /// <value>idUpload from request.</value>

        [DataMember(Name="idUpload")]
        public string IdUpload { get; set; }

        /// <summary>
        /// File length.
        /// </summary>
        /// <value>File length.</value>

        [DataMember(Name="fileLength")]
        public long? FileLength { get; private set; }

        /// <summary>
        /// Gets or Sets BuiltProp
        /// </summary>

        [DataMember(Name="builtProp")]
        public List<DocProperty> BuiltProp { get; set; }

        /// <summary>
        /// Gets or Sets CustomProp
        /// </summary>

        [DataMember(Name="customProp")]
        public List<DocProperty> CustomProp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileSafeResult {\n");
            sb.Append("  IsSuccess: ").Append(IsSuccess).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  UploadFileName: ").Append(UploadFileName).Append("\n");
            sb.Append("  IdUpload: ").Append(IdUpload).Append("\n");
            sb.Append("  FileLength: ").Append(FileLength).Append("\n");
            sb.Append("  BuiltProp: ").Append(BuiltProp).Append("\n");
            sb.Append("  CustomProp: ").Append(CustomProp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FileSafeResult)obj);
        }

        /// <summary>
        /// Returns true if FileSafeResult instances are equal
        /// </summary>
        /// <param name="other">Instance of FileSafeResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileSafeResult other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsSuccess == other.IsSuccess ||
                    IsSuccess != null &&
                    IsSuccess.Equals(other.IsSuccess)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    FileName == other.FileName ||
                    FileName != null &&
                    FileName.Equals(other.FileName)
                ) && 
                (
                    UploadFileName == other.UploadFileName ||
                    UploadFileName != null &&
                    UploadFileName.Equals(other.UploadFileName)
                ) && 
                (
                    IdUpload == other.IdUpload ||
                    IdUpload != null &&
                    IdUpload.Equals(other.IdUpload)
                ) && 
                (
                    FileLength == other.FileLength ||
                    FileLength != null &&
                    FileLength.Equals(other.FileLength)
                ) && 
                (
                    BuiltProp == other.BuiltProp ||
                    BuiltProp != null &&
                    BuiltProp.SequenceEqual(other.BuiltProp)
                ) && 
                (
                    CustomProp == other.CustomProp ||
                    CustomProp != null &&
                    CustomProp.SequenceEqual(other.CustomProp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IsSuccess != null)
                    hashCode = hashCode * 59 + IsSuccess.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (FileName != null)
                    hashCode = hashCode * 59 + FileName.GetHashCode();
                    if (UploadFileName != null)
                    hashCode = hashCode * 59 + UploadFileName.GetHashCode();
                    if (IdUpload != null)
                    hashCode = hashCode * 59 + IdUpload.GetHashCode();
                    if (FileLength != null)
                    hashCode = hashCode * 59 + FileLength.GetHashCode();
                    if (BuiltProp != null)
                    hashCode = hashCode * 59 + BuiltProp.GetHashCode();
                    if (CustomProp != null)
                    hashCode = hashCode * 59 + CustomProp.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FileSafeResult left, FileSafeResult right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FileSafeResult left, FileSafeResult right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
