/*
 * Aspose.Pdf RestApi
 *
 * Demo 1
 *
 * OpenAPI spec version: v1
 * Contact: Evgeny.Pirogov@aspose.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FileResponse : IEquatable<FileResponse>
    { 
        /// <summary>
        /// Gets or Sets StatusCode
        /// </summary>

        [DataMember(Name="statusCode")]
        public int? StatusCode { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>

        [DataMember(Name="status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>

        [DataMember(Name="text")]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Locked
        /// </summary>

        [DataMember(Name="locked")]
        public bool? Locked { get; set; }

        /// <summary>
        /// Last updated
        /// </summary>
        /// <value>Last updated</value>

        [DataMember(Name="updated")]
        public DateTime? Updated { get; set; }

        /// <summary>
        /// Gets or Sets SharedFiles
        /// </summary>

        [DataMember(Name="sharedFiles")]
        public List<FileSafeResult> SharedFiles { get; set; }

        /// <summary>
        /// Gets or Sets Files
        /// </summary>

        [DataMember(Name="files")]
        public List<string> Files { get; set; }

        /// <summary>
        /// Gets or Sets FileProcessingErrorCode
        /// </summary>

        [DataMember(Name="fileProcessingErrorCode")]
        public FileProcessingErrorCode FileProcessingErrorCode { get; set; }

        /// <summary>
        /// Get count of files
        /// </summary>
        /// <value>Get count of files</value>

        [DataMember(Name="fileCount")]
        public int? FileCount { get; private set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>

        [DataMember(Name="fileName")]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or Sets FolderName
        /// </summary>

        [DataMember(Name="folderName")]
        public string FolderName { get; set; }

        /// <summary>
        /// Gets or Sets ResultData
        /// </summary>

        [DataMember(Name="resultData")]
        public Object ResultData { get; set; }

        /// <summary>
        /// Where is processing located
        /// </summary>
        /// <value>Where is processing located</value>

        [DataMember(Name="appInstanceId")]
        public string AppInstanceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileResponse {\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  SharedFiles: ").Append(SharedFiles).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  FileProcessingErrorCode: ").Append(FileProcessingErrorCode).Append("\n");
            sb.Append("  FileCount: ").Append(FileCount).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  FolderName: ").Append(FolderName).Append("\n");
            sb.Append("  ResultData: ").Append(ResultData).Append("\n");
            sb.Append("  AppInstanceId: ").Append(AppInstanceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FileResponse)obj);
        }

        /// <summary>
        /// Returns true if FileResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of FileResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    StatusCode == other.StatusCode ||
                    StatusCode != null &&
                    StatusCode.Equals(other.StatusCode)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.Equals(other.Text)
                ) && 
                (
                    Locked == other.Locked ||
                    Locked != null &&
                    Locked.Equals(other.Locked)
                ) && 
                (
                    Updated == other.Updated ||
                    Updated != null &&
                    Updated.Equals(other.Updated)
                ) && 
                (
                    SharedFiles == other.SharedFiles ||
                    SharedFiles != null &&
                    SharedFiles.SequenceEqual(other.SharedFiles)
                ) && 
                (
                    Files == other.Files ||
                    Files != null &&
                    Files.SequenceEqual(other.Files)
                ) && 
                (
                    FileProcessingErrorCode == other.FileProcessingErrorCode ||
                    FileProcessingErrorCode != null &&
                    FileProcessingErrorCode.Equals(other.FileProcessingErrorCode)
                ) && 
                (
                    FileCount == other.FileCount ||
                    FileCount != null &&
                    FileCount.Equals(other.FileCount)
                ) && 
                (
                    FileName == other.FileName ||
                    FileName != null &&
                    FileName.Equals(other.FileName)
                ) && 
                (
                    FolderName == other.FolderName ||
                    FolderName != null &&
                    FolderName.Equals(other.FolderName)
                ) && 
                (
                    ResultData == other.ResultData ||
                    ResultData != null &&
                    ResultData.Equals(other.ResultData)
                ) && 
                (
                    AppInstanceId == other.AppInstanceId ||
                    AppInstanceId != null &&
                    AppInstanceId.Equals(other.AppInstanceId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (StatusCode != null)
                    hashCode = hashCode * 59 + StatusCode.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                    if (Locked != null)
                    hashCode = hashCode * 59 + Locked.GetHashCode();
                    if (Updated != null)
                    hashCode = hashCode * 59 + Updated.GetHashCode();
                    if (SharedFiles != null)
                    hashCode = hashCode * 59 + SharedFiles.GetHashCode();
                    if (Files != null)
                    hashCode = hashCode * 59 + Files.GetHashCode();
                    if (FileProcessingErrorCode != null)
                    hashCode = hashCode * 59 + FileProcessingErrorCode.GetHashCode();
                    if (FileCount != null)
                    hashCode = hashCode * 59 + FileCount.GetHashCode();
                    if (FileName != null)
                    hashCode = hashCode * 59 + FileName.GetHashCode();
                    if (FolderName != null)
                    hashCode = hashCode * 59 + FolderName.GetHashCode();
                    if (ResultData != null)
                    hashCode = hashCode * 59 + ResultData.GetHashCode();
                    if (AppInstanceId != null)
                    hashCode = hashCode * 59 + AppInstanceId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FileResponse left, FileResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FileResponse left, FileResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
