/*
 * Aspose.Pdf RestApi
 *
 * Demo 1
 *
 * OpenAPI spec version: v1
 * Contact: Evgeny.Pirogov@aspose.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ApiApiController : ControllerBase
    { 








        /// <summary>
        /// Downloads a file.
        /// </summary>
        /// <param name="id">The id of the processing to download.</param>
        /// <param name="file">The name of the file to download.</param>
        /// <response code="200">Returns the file to download.</response>
        /// <response code="400">If the file does not exist.</response>
        /// <response code="500">If there was a server error.</response>
        [HttpGet]
        [Route("/pdf/webapi/download/{id}")]
        [ValidateModelState]
        [SwaggerOperation("PdfWebapiDownloadIdGet")]
        public virtual IActionResult PdfWebapiDownloadIdGet([FromRoute][Required]string id, [FromQuery]string file)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Downloads a file as a stream.
        /// </summary>
        /// <param name="id">The ID of the processing to download.</param>
        /// <param name="fileName">The name of the file to download.</param>
        /// <response code="200">Returns the file stream and metadata.</response>
        /// <response code="400">If the file does not exist or if there was an error processing the request.</response>
        /// <response code="500">If there was a server error.</response>
        [HttpPost]
        [Route("/pdf/webapi/download-stream/{id}")]
        [ValidateModelState]
        [SwaggerOperation("PdfWebapiDownloadStreamIdPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(FileResponse), description: "Returns the file stream and metadata.")]
        public virtual IActionResult PdfWebapiDownloadStreamIdPost([FromRoute][Required]string id, [FromQuery]string fileName)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(FileResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);
            string exampleJson = null;
            exampleJson = "{\n  \"fileName\" : \"fileName\",\n  \"resultData\" : \"\",\n  \"fileProcessingErrorCode\" : 5,\n  \"fileCount\" : 5,\n  \"appInstanceId\" : \"appInstanceId\",\n  \"files\" : [ \"files\", \"files\" ],\n  \"text\" : \"text\",\n  \"folderName\" : \"folderName\",\n  \"locked\" : true,\n  \"updated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"sharedFiles\" : [ {\n    \"fileName\" : \"fileName\",\n    \"uploadFileName\" : \"uploadFileName\",\n    \"customProp\" : [ null, null ],\n    \"id\" : \"id\",\n    \"fileLength\" : 6,\n    \"isSuccess\" : true,\n    \"idUpload\" : \"idUpload\",\n    \"builtProp\" : [ {\n      \"name\" : \"name\",\n      \"readOnly\" : true,\n      \"type\" : 1,\n      \"value\" : \"\",\n      \"key\" : \"key\"\n    }, {\n      \"name\" : \"name\",\n      \"readOnly\" : true,\n      \"type\" : 1,\n      \"value\" : \"\",\n      \"key\" : \"key\"\n    } ]\n  }, {\n    \"fileName\" : \"fileName\",\n    \"uploadFileName\" : \"uploadFileName\",\n    \"customProp\" : [ null, null ],\n    \"id\" : \"id\",\n    \"fileLength\" : 6,\n    \"isSuccess\" : true,\n    \"idUpload\" : \"idUpload\",\n    \"builtProp\" : [ {\n      \"name\" : \"name\",\n      \"readOnly\" : true,\n      \"type\" : 1,\n      \"value\" : \"\",\n      \"key\" : \"key\"\n    }, {\n      \"name\" : \"name\",\n      \"readOnly\" : true,\n      \"type\" : 1,\n      \"value\" : \"\",\n      \"key\" : \"key\"\n    } ]\n  } ],\n  \"statusCode\" : 0,\n  \"status\" : \"status\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<FileResponse>(exampleJson)
                        : default(FileResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }




        /// <summary>
        /// Creates a GIF from the provided images.
        /// </summary>
        /// <remarks>This endpoint is used to create a GIF from the provided images.  If the creation is started, the response will contain a success status and an optional message.  If the creation fails, the response will contain an error status and a message indicating the reason for the failure.</remarks>
        /// <param name="keepImagesAsIs">Indicates whether the images should be kept as is.</param>
        /// <param name="resizeToImage">The index of the image to resize the other images to.</param>
        /// <param name="streched"></param>
        /// <param name="width">The width of the GIF.</param>
        /// <param name="height">The height of the GIF.</param>
        /// <param name="frameTimes">The times for each frame in the GIF.</param>
        /// <response code="200">The resource was successfully added to processing.</response>
        /// <response code="500">The request was invalid or the resource could not be locked.</response>
        [HttpPost]
        [Route("/pdf/webapi/gif")]
        [ValidateModelState]
        [SwaggerOperation("PdfWebapiGifPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(FileResponse), description: "The resource was successfully added to processing.")]
        public virtual IActionResult PdfWebapiGifPost([FromQuery]bool? keepImagesAsIs, [FromQuery]int? resizeToImage, [FromQuery]bool? streched, [FromQuery]int? width, [FromQuery]int? height, [FromQuery]string frameTimes)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(FileResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);
            string exampleJson = null;
            exampleJson = "{\n  \"fileName\" : \"fileName\",\n  \"resultData\" : \"\",\n  \"fileProcessingErrorCode\" : 5,\n  \"fileCount\" : 5,\n  \"appInstanceId\" : \"appInstanceId\",\n  \"files\" : [ \"files\", \"files\" ],\n  \"text\" : \"text\",\n  \"folderName\" : \"folderName\",\n  \"locked\" : true,\n  \"updated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"sharedFiles\" : [ {\n    \"fileName\" : \"fileName\",\n    \"uploadFileName\" : \"uploadFileName\",\n    \"customProp\" : [ null, null ],\n    \"id\" : \"id\",\n    \"fileLength\" : 6,\n    \"isSuccess\" : true,\n    \"idUpload\" : \"idUpload\",\n    \"builtProp\" : [ {\n      \"name\" : \"name\",\n      \"readOnly\" : true,\n      \"type\" : 1,\n      \"value\" : \"\",\n      \"key\" : \"key\"\n    }, {\n      \"name\" : \"name\",\n      \"readOnly\" : true,\n      \"type\" : 1,\n      \"value\" : \"\",\n      \"key\" : \"key\"\n    } ]\n  }, {\n    \"fileName\" : \"fileName\",\n    \"uploadFileName\" : \"uploadFileName\",\n    \"customProp\" : [ null, null ],\n    \"id\" : \"id\",\n    \"fileLength\" : 6,\n    \"isSuccess\" : true,\n    \"idUpload\" : \"idUpload\",\n    \"builtProp\" : [ {\n      \"name\" : \"name\",\n      \"readOnly\" : true,\n      \"type\" : 1,\n      \"value\" : \"\",\n      \"key\" : \"key\"\n    }, {\n      \"name\" : \"name\",\n      \"readOnly\" : true,\n      \"type\" : 1,\n      \"value\" : \"\",\n      \"key\" : \"key\"\n    } ]\n  } ],\n  \"statusCode\" : 0,\n  \"status\" : \"status\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<FileResponse>(exampleJson)
                        : default(FileResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }









        /// <summary>
        /// Removes all files from processing.
        /// </summary>
        /// <param name="id">The ID of the processing to remove.</param>
        /// <response code="200">Returns a FileResponse object indicating that all files was successfully removed.</response>
        /// <response code="400">If the file does not exist or if there was an error processing the request.</response>
        /// <response code="500">If there was a server error.</response>
        [HttpPost]
        [Route("/pdf/webapi/remove/{id}")]
        [ValidateModelState]
        [SwaggerOperation("PdfWebapiRemoveIdPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(FileResponse), description: "Returns a FileResponse object indicating that all files was successfully removed.")]
        public virtual IActionResult PdfWebapiRemoveIdPost([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(FileResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);
            string exampleJson = null;
            exampleJson = "{\n  \"fileName\" : \"fileName\",\n  \"resultData\" : \"\",\n  \"fileProcessingErrorCode\" : 5,\n  \"fileCount\" : 5,\n  \"appInstanceId\" : \"appInstanceId\",\n  \"files\" : [ \"files\", \"files\" ],\n  \"text\" : \"text\",\n  \"folderName\" : \"folderName\",\n  \"locked\" : true,\n  \"updated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"sharedFiles\" : [ {\n    \"fileName\" : \"fileName\",\n    \"uploadFileName\" : \"uploadFileName\",\n    \"customProp\" : [ null, null ],\n    \"id\" : \"id\",\n    \"fileLength\" : 6,\n    \"isSuccess\" : true,\n    \"idUpload\" : \"idUpload\",\n    \"builtProp\" : [ {\n      \"name\" : \"name\",\n      \"readOnly\" : true,\n      \"type\" : 1,\n      \"value\" : \"\",\n      \"key\" : \"key\"\n    }, {\n      \"name\" : \"name\",\n      \"readOnly\" : true,\n      \"type\" : 1,\n      \"value\" : \"\",\n      \"key\" : \"key\"\n    } ]\n  }, {\n    \"fileName\" : \"fileName\",\n    \"uploadFileName\" : \"uploadFileName\",\n    \"customProp\" : [ null, null ],\n    \"id\" : \"id\",\n    \"fileLength\" : 6,\n    \"isSuccess\" : true,\n    \"idUpload\" : \"idUpload\",\n    \"builtProp\" : [ {\n      \"name\" : \"name\",\n      \"readOnly\" : true,\n      \"type\" : 1,\n      \"value\" : \"\",\n      \"key\" : \"key\"\n    }, {\n      \"name\" : \"name\",\n      \"readOnly\" : true,\n      \"type\" : 1,\n      \"value\" : \"\",\n      \"key\" : \"key\"\n    } ]\n  } ],\n  \"statusCode\" : 0,\n  \"status\" : \"status\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<FileResponse>(exampleJson)
                        : default(FileResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }












        /// <summary>
        /// Retrieves the status of a processing.
        /// </summary>
        /// <param name="id">The ID of the processing to check the status of.</param>
        /// <response code="200">Returns a FileResponse object with the status information.</response>
        /// <response code="400">If the file does not exist or if there was an error processing the request.</response>
        /// <response code="500">If there was a server error.</response>
        [HttpPost]
        [Route("/pdf/webapi/status/{id}")]
        [ValidateModelState]
        [SwaggerOperation("PdfWebapiStatusIdPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(FileResponse), description: "Returns a FileResponse object with the status information.")]
        public virtual IActionResult PdfWebapiStatusIdPost([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(FileResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);
            string exampleJson = null;
            exampleJson = "{\n  \"fileName\" : \"fileName\",\n  \"resultData\" : \"\",\n  \"fileProcessingErrorCode\" : 5,\n  \"fileCount\" : 5,\n  \"appInstanceId\" : \"appInstanceId\",\n  \"files\" : [ \"files\", \"files\" ],\n  \"text\" : \"text\",\n  \"folderName\" : \"folderName\",\n  \"locked\" : true,\n  \"updated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"sharedFiles\" : [ {\n    \"fileName\" : \"fileName\",\n    \"uploadFileName\" : \"uploadFileName\",\n    \"customProp\" : [ null, null ],\n    \"id\" : \"id\",\n    \"fileLength\" : 6,\n    \"isSuccess\" : true,\n    \"idUpload\" : \"idUpload\",\n    \"builtProp\" : [ {\n      \"name\" : \"name\",\n      \"readOnly\" : true,\n      \"type\" : 1,\n      \"value\" : \"\",\n      \"key\" : \"key\"\n    }, {\n      \"name\" : \"name\",\n      \"readOnly\" : true,\n      \"type\" : 1,\n      \"value\" : \"\",\n      \"key\" : \"key\"\n    } ]\n  }, {\n    \"fileName\" : \"fileName\",\n    \"uploadFileName\" : \"uploadFileName\",\n    \"customProp\" : [ null, null ],\n    \"id\" : \"id\",\n    \"fileLength\" : 6,\n    \"isSuccess\" : true,\n    \"idUpload\" : \"idUpload\",\n    \"builtProp\" : [ {\n      \"name\" : \"name\",\n      \"readOnly\" : true,\n      \"type\" : 1,\n      \"value\" : \"\",\n      \"key\" : \"key\"\n    }, {\n      \"name\" : \"name\",\n      \"readOnly\" : true,\n      \"type\" : 1,\n      \"value\" : \"\",\n      \"key\" : \"key\"\n    } ]\n  } ],\n  \"statusCode\" : 0,\n  \"status\" : \"status\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<FileResponse>(exampleJson)
                        : default(FileResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }





    }
}
